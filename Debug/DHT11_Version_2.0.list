
DHT11_Version_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039e4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  08003af0  08003af0  00004af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dc4  08003dc4  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003dc4  08003dc4  00004dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dcc  08003dcc  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dcc  08003dcc  00004dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003dd0  08003dd0  00004dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003dd4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000068  08003e3c  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08003e3c  00005274  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b68e  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001af1  00000000  00000000  0001071f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00012210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000099f  00000000  00000000  00012e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185c2  00000000  00000000  000137ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de49  00000000  00000000  0002bdc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c2bf  00000000  00000000  00039c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5ec9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dd0  00000000  00000000  000c5f0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000c9cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ad8 	.word	0x08003ad8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003ad8 	.word	0x08003ad8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <print_first_n>:
DHT11_Data* tail = NULL;
int node_count = 0;
#define MAX_NODES 50

void print_first_n(int n)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b096      	sub	sp, #88	@ 0x58
 8000160:	af02      	add	r7, sp, #8
 8000162:	6078      	str	r0, [r7, #4]
    DHT11_Data* current = head;
 8000164:	4b16      	ldr	r3, [pc, #88]	@ (80001c0 <print_first_n+0x64>)
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int count = 0;
 800016a:	2300      	movs	r3, #0
 800016c:	64bb      	str	r3, [r7, #72]	@ 0x48
    char msg[64];

    while (current != NULL && count < n)
 800016e:	e01b      	b.n	80001a8 <print_first_n+0x4c>
    {
        snprintf(msg, sizeof(msg), "[%lu] Temp: %d°C, Hum: %d%%\r\n",
                 (unsigned long)current->timestamp, current->temperature, current->humidity);
 8000170:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000172:	781b      	ldrb	r3, [r3, #0]
        snprintf(msg, sizeof(msg), "[%lu] Temp: %d°C, Hum: %d%%\r\n",
 8000174:	4619      	mov	r1, r3
                 (unsigned long)current->timestamp, current->temperature, current->humidity);
 8000176:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000178:	785b      	ldrb	r3, [r3, #1]
        snprintf(msg, sizeof(msg), "[%lu] Temp: %d°C, Hum: %d%%\r\n",
 800017a:	461a      	mov	r2, r3
                 (unsigned long)current->timestamp, current->temperature, current->humidity);
 800017c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800017e:	789b      	ldrb	r3, [r3, #2]
        snprintf(msg, sizeof(msg), "[%lu] Temp: %d°C, Hum: %d%%\r\n",
 8000180:	f107 0008 	add.w	r0, r7, #8
 8000184:	9301      	str	r3, [sp, #4]
 8000186:	9200      	str	r2, [sp, #0]
 8000188:	460b      	mov	r3, r1
 800018a:	4a0e      	ldr	r2, [pc, #56]	@ (80001c4 <print_first_n+0x68>)
 800018c:	2140      	movs	r1, #64	@ 0x40
 800018e:	f002 fd01 	bl	8002b94 <sniprintf>
        uart_print(msg);
 8000192:	f107 0308 	add.w	r3, r7, #8
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f8b0 	bl	80002fc <uart_print>
        current = current->next;
 800019c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800019e:	685b      	ldr	r3, [r3, #4]
 80001a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
        count++;
 80001a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80001a4:	3301      	adds	r3, #1
 80001a6:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (current != NULL && count < n)
 80001a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d003      	beq.n	80001b6 <print_first_n+0x5a>
 80001ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	429a      	cmp	r2, r3
 80001b4:	dbdc      	blt.n	8000170 <print_first_n+0x14>
    }
}
 80001b6:	bf00      	nop
 80001b8:	3750      	adds	r7, #80	@ 0x50
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	20000114 	.word	0x20000114
 80001c4:	08003af0 	.word	0x08003af0

080001c8 <print_last_n>:

void print_last_n(int n)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b096      	sub	sp, #88	@ 0x58
 80001cc:	af02      	add	r7, sp, #8
 80001ce:	6078      	str	r0, [r7, #4]
    if (n > node_count)
 80001d0:	4b1e      	ldr	r3, [pc, #120]	@ (800024c <print_last_n+0x84>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	687a      	ldr	r2, [r7, #4]
 80001d6:	429a      	cmp	r2, r3
 80001d8:	dd02      	ble.n	80001e0 <print_last_n+0x18>
        n = node_count;
 80001da:	4b1c      	ldr	r3, [pc, #112]	@ (800024c <print_last_n+0x84>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	607b      	str	r3, [r7, #4]

    int skip = node_count - n;
 80001e0:	4b1a      	ldr	r3, [pc, #104]	@ (800024c <print_last_n+0x84>)
 80001e2:	681a      	ldr	r2, [r3, #0]
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	1ad3      	subs	r3, r2, r3
 80001e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    DHT11_Data* current = head;
 80001ea:	4b19      	ldr	r3, [pc, #100]	@ (8000250 <print_last_n+0x88>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (skip-- > 0 && current)
 80001f0:	e002      	b.n	80001f8 <print_last_n+0x30>
        current = current->next;
 80001f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80001f4:	685b      	ldr	r3, [r3, #4]
 80001f6:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (skip-- > 0 && current)
 80001f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80001fa:	1e5a      	subs	r2, r3, #1
 80001fc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80001fe:	2b00      	cmp	r3, #0
 8000200:	dd1c      	ble.n	800023c <print_last_n+0x74>
 8000202:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000204:	2b00      	cmp	r3, #0
 8000206:	d1f4      	bne.n	80001f2 <print_last_n+0x2a>

    char msg[64];
    while (current)
 8000208:	e018      	b.n	800023c <print_last_n+0x74>
    {
        snprintf(msg, sizeof(msg), "[%lu] Temp: %d°C, Hum: %d%%\r\n",
                 (unsigned long)current->timestamp, current->temperature, current->humidity);
 800020a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800020c:	781b      	ldrb	r3, [r3, #0]
        snprintf(msg, sizeof(msg), "[%lu] Temp: %d°C, Hum: %d%%\r\n",
 800020e:	4619      	mov	r1, r3
                 (unsigned long)current->timestamp, current->temperature, current->humidity);
 8000210:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000212:	785b      	ldrb	r3, [r3, #1]
        snprintf(msg, sizeof(msg), "[%lu] Temp: %d°C, Hum: %d%%\r\n",
 8000214:	461a      	mov	r2, r3
                 (unsigned long)current->timestamp, current->temperature, current->humidity);
 8000216:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000218:	789b      	ldrb	r3, [r3, #2]
        snprintf(msg, sizeof(msg), "[%lu] Temp: %d°C, Hum: %d%%\r\n",
 800021a:	f107 0008 	add.w	r0, r7, #8
 800021e:	9301      	str	r3, [sp, #4]
 8000220:	9200      	str	r2, [sp, #0]
 8000222:	460b      	mov	r3, r1
 8000224:	4a0b      	ldr	r2, [pc, #44]	@ (8000254 <print_last_n+0x8c>)
 8000226:	2140      	movs	r1, #64	@ 0x40
 8000228:	f002 fcb4 	bl	8002b94 <sniprintf>
        uart_print(msg);
 800022c:	f107 0308 	add.w	r3, r7, #8
 8000230:	4618      	mov	r0, r3
 8000232:	f000 f863 	bl	80002fc <uart_print>
        current = current->next;
 8000236:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000238:	685b      	ldr	r3, [r3, #4]
 800023a:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (current)
 800023c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800023e:	2b00      	cmp	r3, #0
 8000240:	d1e3      	bne.n	800020a <print_last_n+0x42>
    }
}
 8000242:	bf00      	nop
 8000244:	bf00      	nop
 8000246:	3750      	adds	r7, #80	@ 0x50
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	2000011c 	.word	0x2000011c
 8000250:	20000114 	.word	0x20000114
 8000254:	08003af0 	.word	0x08003af0

08000258 <store_values>:
void store_values(uint8_t temperature, uint8_t humidity)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	460a      	mov	r2, r1
 8000262:	71fb      	strb	r3, [r7, #7]
 8000264:	4613      	mov	r3, r2
 8000266:	71bb      	strb	r3, [r7, #6]
	DHT11_Data* new_node  = malloc(sizeof(DHT11_Data));
 8000268:	2008      	movs	r0, #8
 800026a:	f002 fa1f 	bl	80026ac <malloc>
 800026e:	4603      	mov	r3, r0
 8000270:	60fb      	str	r3, [r7, #12]
	new_node->temperature = temperature;
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	79fa      	ldrb	r2, [r7, #7]
 8000276:	705a      	strb	r2, [r3, #1]
	new_node->humidity = humidity;
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	79ba      	ldrb	r2, [r7, #6]
 800027c:	709a      	strb	r2, [r3, #2]
	new_node->timestamp = HAL_GetTick();
 800027e:	f000 fd95 	bl	8000dac <HAL_GetTick>
 8000282:	4603      	mov	r3, r0
 8000284:	b2da      	uxtb	r2, r3
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	701a      	strb	r2, [r3, #0]
	new_node->next = NULL;
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	2200      	movs	r2, #0
 800028e:	605a      	str	r2, [r3, #4]

	if (head == NULL)
 8000290:	4b17      	ldr	r3, [pc, #92]	@ (80002f0 <store_values+0x98>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d107      	bne.n	80002a8 <store_values+0x50>
	{
	    head = tail = new_node;
 8000298:	4a16      	ldr	r2, [pc, #88]	@ (80002f4 <store_values+0x9c>)
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	6013      	str	r3, [r2, #0]
 800029e:	4b15      	ldr	r3, [pc, #84]	@ (80002f4 <store_values+0x9c>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a13      	ldr	r2, [pc, #76]	@ (80002f0 <store_values+0x98>)
 80002a4:	6013      	str	r3, [r2, #0]
 80002a6:	e006      	b.n	80002b6 <store_values+0x5e>
	}
	else
	{
	    tail->next = new_node;
 80002a8:	4b12      	ldr	r3, [pc, #72]	@ (80002f4 <store_values+0x9c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	68fa      	ldr	r2, [r7, #12]
 80002ae:	605a      	str	r2, [r3, #4]
	    tail = new_node;
 80002b0:	4a10      	ldr	r2, [pc, #64]	@ (80002f4 <store_values+0x9c>)
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	6013      	str	r3, [r2, #0]
	 }

	    node_count++;
 80002b6:	4b10      	ldr	r3, [pc, #64]	@ (80002f8 <store_values+0xa0>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	3301      	adds	r3, #1
 80002bc:	4a0e      	ldr	r2, [pc, #56]	@ (80002f8 <store_values+0xa0>)
 80002be:	6013      	str	r3, [r2, #0]

	    if(node_count > MAX_NODES)
 80002c0:	4b0d      	ldr	r3, [pc, #52]	@ (80002f8 <store_values+0xa0>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	2b32      	cmp	r3, #50	@ 0x32
 80002c6:	dd0f      	ble.n	80002e8 <store_values+0x90>
	    {
	    	DHT11_Data* temp_node = head;
 80002c8:	4b09      	ldr	r3, [pc, #36]	@ (80002f0 <store_values+0x98>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	60bb      	str	r3, [r7, #8]
	    	head = head->next;
 80002ce:	4b08      	ldr	r3, [pc, #32]	@ (80002f0 <store_values+0x98>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	4a06      	ldr	r2, [pc, #24]	@ (80002f0 <store_values+0x98>)
 80002d6:	6013      	str	r3, [r2, #0]
	    	free(temp_node);
 80002d8:	68b8      	ldr	r0, [r7, #8]
 80002da:	f002 f9ef 	bl	80026bc <free>
	    	node_count--;
 80002de:	4b06      	ldr	r3, [pc, #24]	@ (80002f8 <store_values+0xa0>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	3b01      	subs	r3, #1
 80002e4:	4a04      	ldr	r2, [pc, #16]	@ (80002f8 <store_values+0xa0>)
 80002e6:	6013      	str	r3, [r2, #0]
	    }
}
 80002e8:	bf00      	nop
 80002ea:	3710      	adds	r7, #16
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000114 	.word	0x20000114
 80002f4:	20000118 	.word	0x20000118
 80002f8:	2000011c 	.word	0x2000011c

080002fc <uart_print>:
void uart_print(const char *msg)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000304:	6878      	ldr	r0, [r7, #4]
 8000306:	f7ff ff21 	bl	800014c <strlen>
 800030a:	4603      	mov	r3, r0
 800030c:	b29a      	uxth	r2, r3
 800030e:	f04f 33ff 	mov.w	r3, #4294967295
 8000312:	6879      	ldr	r1, [r7, #4]
 8000314:	4803      	ldr	r0, [pc, #12]	@ (8000324 <uart_print+0x28>)
 8000316:	f001 ff59 	bl	80021cc <HAL_UART_Transmit>
}
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	200000cc 	.word	0x200000cc

08000328 <handle_uart_command>:

void handle_uart_command(char *cmd)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
    int n = atoi(cmd);
 8000330:	6878      	ldr	r0, [r7, #4]
 8000332:	f002 f9b7 	bl	80026a4 <atoi>
 8000336:	60f8      	str	r0, [r7, #12]

    if (n == 0 && cmd[0] != '0')
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d107      	bne.n	800034e <handle_uart_command+0x26>
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2b30      	cmp	r3, #48	@ 0x30
 8000344:	d003      	beq.n	800034e <handle_uart_command+0x26>
    {
        printf("Invalid command\r\n");
 8000346:	480e      	ldr	r0, [pc, #56]	@ (8000380 <handle_uart_command+0x58>)
 8000348:	f002 fc1c 	bl	8002b84 <puts>
        return;
 800034c:	e015      	b.n	800037a <handle_uart_command+0x52>
    }

    if (n > 0)
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	2b00      	cmp	r3, #0
 8000352:	dd07      	ble.n	8000364 <handle_uart_command+0x3c>
    {
        printf("Last %d readings:\r\n", n);
 8000354:	68f9      	ldr	r1, [r7, #12]
 8000356:	480b      	ldr	r0, [pc, #44]	@ (8000384 <handle_uart_command+0x5c>)
 8000358:	f002 fbac 	bl	8002ab4 <iprintf>
        print_last_n(n);
 800035c:	68f8      	ldr	r0, [r7, #12]
 800035e:	f7ff ff33 	bl	80001c8 <print_last_n>
 8000362:	e00a      	b.n	800037a <handle_uart_command+0x52>
    }
    else
    {
        printf("First %d readings:\r\n", -n);
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	425b      	negs	r3, r3
 8000368:	4619      	mov	r1, r3
 800036a:	4807      	ldr	r0, [pc, #28]	@ (8000388 <handle_uart_command+0x60>)
 800036c:	f002 fba2 	bl	8002ab4 <iprintf>
        print_first_n(-n);
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	425b      	negs	r3, r3
 8000374:	4618      	mov	r0, r3
 8000376:	f7ff fef1 	bl	800015c <print_first_n>
    }
}
 800037a:	3710      	adds	r7, #16
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	08003b10 	.word	0x08003b10
 8000384:	08003b24 	.word	0x08003b24
 8000388:	08003b38 	.word	0x08003b38

0800038c <DHT11_Set_Pin_Output>:
void delay_us(uint16_t us) {
  __HAL_TIM_SET_COUNTER(&htim3, 0);
  while (__HAL_TIM_GET_COUNTER(&htim3) < us);
}

void DHT11_Set_Pin_Output(void) {
 800038c:	b580      	push	{r7, lr}
 800038e:	b084      	sub	sp, #16
 8000390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000392:	463b      	mov	r3, r7
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
 800039a:	609a      	str	r2, [r3, #8]
 800039c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = DHT11_PIN;
 800039e:	2304      	movs	r3, #4
 80003a0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a2:	2301      	movs	r3, #1
 80003a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003aa:	2303      	movs	r3, #3
 80003ac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 80003ae:	463b      	mov	r3, r7
 80003b0:	4619      	mov	r1, r3
 80003b2:	4803      	ldr	r0, [pc, #12]	@ (80003c0 <DHT11_Set_Pin_Output+0x34>)
 80003b4:	f000 fe0c 	bl	8000fd0 <HAL_GPIO_Init>
}
 80003b8:	bf00      	nop
 80003ba:	3710      	adds	r7, #16
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40010800 	.word	0x40010800

080003c4 <DHT11_Set_Pin_Input>:

void DHT11_Set_Pin_Input(void) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ca:	463b      	mov	r3, r7
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
 80003d4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = DHT11_PIN;
 80003d6:	2304      	movs	r3, #4
 80003d8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003da:	2300      	movs	r3, #0
 80003dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	2300      	movs	r3, #0
 80003e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003e2:	2303      	movs	r3, #3
 80003e4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 80003e6:	463b      	mov	r3, r7
 80003e8:	4619      	mov	r1, r3
 80003ea:	4803      	ldr	r0, [pc, #12]	@ (80003f8 <DHT11_Set_Pin_Input+0x34>)
 80003ec:	f000 fdf0 	bl	8000fd0 <HAL_GPIO_Init>
}
 80003f0:	bf00      	nop
 80003f2:	3710      	adds	r7, #16
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40010800 	.word	0x40010800

080003fc <DHT11_Read>:

uint8_t DHT11_Read(DHT11_Data *data)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b094      	sub	sp, #80	@ 0x50
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	uint16_t mTime1 = 0, mTime2 = 0, mBit = 0;
 8000404:	2300      	movs	r3, #0
 8000406:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8000408:	2300      	movs	r3, #0
 800040a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800040e:	2300      	movs	r3, #0
 8000410:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
	uint8_t humVal = 0, tempVal = 0, parityVal = 0, genParity = 0;
 8000414:	2300      	movs	r3, #0
 8000416:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800041a:	2300      	movs	r3, #0
 800041c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8000420:	2300      	movs	r3, #0
 8000422:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 8000426:	2300      	movs	r3, #0
 8000428:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	uint8_t mData[40]={0};
 800042c:	f107 030c 	add.w	r3, r7, #12
 8000430:	2228      	movs	r2, #40	@ 0x28
 8000432:	2100      	movs	r1, #0
 8000434:	4618      	mov	r0, r3
 8000436:	f002 fcbb 	bl	8002db0 <memset>


HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 800043a:	2201      	movs	r2, #1
 800043c:	2104      	movs	r1, #4
 800043e:	4898      	ldr	r0, [pc, #608]	@ (80006a0 <DHT11_Read+0x2a4>)
 8000440:	f000 ff61 	bl	8001306 <HAL_GPIO_WritePin>
HAL_Delay(180);
 8000444:	20b4      	movs	r0, #180	@ 0xb4
 8000446:	f000 fcbb 	bl	8000dc0 <HAL_Delay>
  // Start signal
  DHT11_Set_Pin_Output();
 800044a:	f7ff ff9f 	bl	800038c <DHT11_Set_Pin_Output>
  HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	2104      	movs	r1, #4
 8000452:	4893      	ldr	r0, [pc, #588]	@ (80006a0 <DHT11_Read+0x2a4>)
 8000454:	f000 ff57 	bl	8001306 <HAL_GPIO_WritePin>
  HAL_Delay(18);
 8000458:	2012      	movs	r0, #18
 800045a:	f000 fcb1 	bl	8000dc0 <HAL_Delay>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800045e:	b672      	cpsid	i
}
 8000460:	bf00      	nop
  __disable_irq();
  HAL_TIM_Base_Start(&htim3);
 8000462:	4890      	ldr	r0, [pc, #576]	@ (80006a4 <DHT11_Read+0x2a8>)
 8000464:	f001 fbc8 	bl	8001bf8 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, GPIO_PIN_SET);
 8000468:	2201      	movs	r2, #1
 800046a:	2104      	movs	r1, #4
 800046c:	488c      	ldr	r0, [pc, #560]	@ (80006a0 <DHT11_Read+0x2a4>)
 800046e:	f000 ff4a 	bl	8001306 <HAL_GPIO_WritePin>
  //delay_us(40);
  DHT11_Set_Pin_Input();
 8000472:	f7ff ffa7 	bl	80003c4 <DHT11_Set_Pin_Input>

  // Wait for DHT response
  __HAL_TIM_SET_COUNTER(&htim3,0);
 8000476:	4b8b      	ldr	r3, [pc, #556]	@ (80006a4 <DHT11_Read+0x2a8>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	2200      	movs	r2, #0
 800047c:	625a      	str	r2, [r3, #36]	@ 0x24
  while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET)
 800047e:	e00d      	b.n	800049c <DHT11_Read+0xa0>
  {
    if ((uint16_t)__HAL_TIM_GET_COUNTER(&htim3) > 500)
 8000480:	4b88      	ldr	r3, [pc, #544]	@ (80006a4 <DHT11_Read+0x2a8>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000486:	b29b      	uxth	r3, r3
 8000488:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800048c:	d906      	bls.n	800049c <DHT11_Read+0xa0>
	{
    	uart_print("📟Failure At First Stage\r\n");
 800048e:	4886      	ldr	r0, [pc, #536]	@ (80006a8 <DHT11_Read+0x2ac>)
 8000490:	f7ff ff34 	bl	80002fc <uart_print>
  __ASM volatile ("cpsie i" : : : "memory");
 8000494:	b662      	cpsie	i
}
 8000496:	bf00      	nop
		__enable_irq();
		return 0; // timeout
 8000498:	2300      	movs	r3, #0
 800049a:	e13b      	b.n	8000714 <DHT11_Read+0x318>
  while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET)
 800049c:	2104      	movs	r1, #4
 800049e:	4880      	ldr	r0, [pc, #512]	@ (80006a0 <DHT11_Read+0x2a4>)
 80004a0:	f000 ff1a 	bl	80012d8 <HAL_GPIO_ReadPin>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d0ea      	beq.n	8000480 <DHT11_Read+0x84>
    }
  }

  __HAL_TIM_SET_COUNTER(&htim3,0);
 80004aa:	4b7e      	ldr	r3, [pc, #504]	@ (80006a4 <DHT11_Read+0x2a8>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2200      	movs	r2, #0
 80004b0:	625a      	str	r2, [r3, #36]	@ 0x24
  while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_RESET)
 80004b2:	e00d      	b.n	80004d0 <DHT11_Read+0xd4>
  {
    if ((uint16_t)__HAL_TIM_GET_COUNTER(&htim3) > 500)
 80004b4:	4b7b      	ldr	r3, [pc, #492]	@ (80006a4 <DHT11_Read+0x2a8>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80004c0:	d906      	bls.n	80004d0 <DHT11_Read+0xd4>
    {
    	uart_print("📟Failure At Second Stage\r\n");
 80004c2:	487a      	ldr	r0, [pc, #488]	@ (80006ac <DHT11_Read+0x2b0>)
 80004c4:	f7ff ff1a 	bl	80002fc <uart_print>
  __ASM volatile ("cpsie i" : : : "memory");
 80004c8:	b662      	cpsie	i
}
 80004ca:	bf00      	nop
    	__enable_irq();
    	return 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	e121      	b.n	8000714 <DHT11_Read+0x318>
  while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_RESET)
 80004d0:	2104      	movs	r1, #4
 80004d2:	4873      	ldr	r0, [pc, #460]	@ (80006a0 <DHT11_Read+0x2a4>)
 80004d4:	f000 ff00 	bl	80012d8 <HAL_GPIO_ReadPin>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d0ea      	beq.n	80004b4 <DHT11_Read+0xb8>
    }
  }
  mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim3);
 80004de:	4b71      	ldr	r3, [pc, #452]	@ (80006a4 <DHT11_Read+0x2a8>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004e4:	86fb      	strh	r3, [r7, #54]	@ 0x36
  __HAL_TIM_SET_COUNTER(&htim3,0);
 80004e6:	4b6f      	ldr	r3, [pc, #444]	@ (80006a4 <DHT11_Read+0x2a8>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2200      	movs	r2, #0
 80004ec:	625a      	str	r2, [r3, #36]	@ 0x24
  while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET) {
 80004ee:	e012      	b.n	8000516 <DHT11_Read+0x11a>
    if ((uint16_t)__HAL_TIM_GET_COUNTER(&htim3) > 500)
 80004f0:	4b6c      	ldr	r3, [pc, #432]	@ (80006a4 <DHT11_Read+0x2a8>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80004fc:	d906      	bls.n	800050c <DHT11_Read+0x110>
    {
    	uart_print("📟Failure At tHIRD Stage\r\n");
 80004fe:	486c      	ldr	r0, [pc, #432]	@ (80006b0 <DHT11_Read+0x2b4>)
 8000500:	f7ff fefc 	bl	80002fc <uart_print>
  __ASM volatile ("cpsie i" : : : "memory");
 8000504:	b662      	cpsie	i
}
 8000506:	bf00      	nop
    	__enable_irq();
    	return 0;
 8000508:	2300      	movs	r3, #0
 800050a:	e103      	b.n	8000714 <DHT11_Read+0x318>
    }
  mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim3);
 800050c:	4b65      	ldr	r3, [pc, #404]	@ (80006a4 <DHT11_Read+0x2a8>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000512:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET) {
 8000516:	2104      	movs	r1, #4
 8000518:	4861      	ldr	r0, [pc, #388]	@ (80006a0 <DHT11_Read+0x2a4>)
 800051a:	f000 fedd 	bl	80012d8 <HAL_GPIO_ReadPin>
 800051e:	4603      	mov	r3, r0
 8000520:	2b01      	cmp	r3, #1
 8000522:	d0e5      	beq.n	80004f0 <DHT11_Read+0xf4>
  }
  //if answer is wrong return
  	if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 8000524:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000526:	2b4a      	cmp	r3, #74	@ 0x4a
 8000528:	d811      	bhi.n	800054e <DHT11_Read+0x152>
 800052a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800052c:	2b55      	cmp	r3, #85	@ 0x55
 800052e:	d90e      	bls.n	800054e <DHT11_Read+0x152>
 8000530:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000534:	2b4a      	cmp	r3, #74	@ 0x4a
 8000536:	d80a      	bhi.n	800054e <DHT11_Read+0x152>
 8000538:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800053c:	2b55      	cmp	r3, #85	@ 0x55
 800053e:	d906      	bls.n	800054e <DHT11_Read+0x152>
  	{
  		uart_print("📟Failure At 4TH Stage\r\n");
 8000540:	485c      	ldr	r0, [pc, #368]	@ (80006b4 <DHT11_Read+0x2b8>)
 8000542:	f7ff fedb 	bl	80002fc <uart_print>
  __ASM volatile ("cpsie i" : : : "memory");
 8000546:	b662      	cpsie	i
}
 8000548:	bf00      	nop
  		__enable_irq();
  		return 0;
 800054a:	2300      	movs	r3, #0
 800054c:	e0e2      	b.n	8000714 <DHT11_Read+0x318>
  	}


  // Read 40 bits (5 bytes)
  	for(int j = 0; j < 40; j++)
 800054e:	2300      	movs	r3, #0
 8000550:	647b      	str	r3, [r7, #68]	@ 0x44
 8000552:	e056      	b.n	8000602 <DHT11_Read+0x206>
  	{
  	  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000554:	4b53      	ldr	r3, [pc, #332]	@ (80006a4 <DHT11_Read+0x2a8>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2200      	movs	r2, #0
 800055a:	625a      	str	r2, [r3, #36]	@ 0x24
      while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_RESET) // wait for high
 800055c:	e00d      	b.n	800057a <DHT11_Read+0x17e>
      {
    	  //delay_us(40); // wait 40us
    	  if((uint16_t)__HAL_TIM_GET_COUNTER(&htim3) > 500)
 800055e:	4b51      	ldr	r3, [pc, #324]	@ (80006a4 <DHT11_Read+0x2a8>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000564:	b29b      	uxth	r3, r3
 8000566:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800056a:	d906      	bls.n	800057a <DHT11_Read+0x17e>
    	  {
    		  uart_print("📟Failure At D1 Stage\r\n");
 800056c:	4852      	ldr	r0, [pc, #328]	@ (80006b8 <DHT11_Read+0x2bc>)
 800056e:	f7ff fec5 	bl	80002fc <uart_print>
  __ASM volatile ("cpsie i" : : : "memory");
 8000572:	b662      	cpsie	i
}
 8000574:	bf00      	nop
      				__enable_irq();
      				return 0;
 8000576:	2300      	movs	r3, #0
 8000578:	e0cc      	b.n	8000714 <DHT11_Read+0x318>
      while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_RESET) // wait for high
 800057a:	2104      	movs	r1, #4
 800057c:	4848      	ldr	r0, [pc, #288]	@ (80006a0 <DHT11_Read+0x2a4>)
 800057e:	f000 feab 	bl	80012d8 <HAL_GPIO_ReadPin>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d0ea      	beq.n	800055e <DHT11_Read+0x162>
    	  }
      }
      __HAL_TIM_SET_COUNTER(&htim3, 0);
 8000588:	4b46      	ldr	r3, [pc, #280]	@ (80006a4 <DHT11_Read+0x2a8>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2200      	movs	r2, #0
 800058e:	625a      	str	r2, [r3, #36]	@ 0x24
      while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET) // wait for high
 8000590:	e00d      	b.n	80005ae <DHT11_Read+0x1b2>
            {
          	  //delay_us(40); // wait 40us
          	  if((uint16_t)__HAL_TIM_GET_COUNTER(&htim3) > 500)
 8000592:	4b44      	ldr	r3, [pc, #272]	@ (80006a4 <DHT11_Read+0x2a8>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000598:	b29b      	uxth	r3, r3
 800059a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800059e:	d906      	bls.n	80005ae <DHT11_Read+0x1b2>
          	  {
          		uart_print("📟Failure At D2 Stage\r\n");
 80005a0:	4846      	ldr	r0, [pc, #280]	@ (80006bc <DHT11_Read+0x2c0>)
 80005a2:	f7ff feab 	bl	80002fc <uart_print>
  __ASM volatile ("cpsie i" : : : "memory");
 80005a6:	b662      	cpsie	i
}
 80005a8:	bf00      	nop
            				__enable_irq();
            				return 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	e0b2      	b.n	8000714 <DHT11_Read+0x318>
      while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN) == GPIO_PIN_SET) // wait for high
 80005ae:	2104      	movs	r1, #4
 80005b0:	483b      	ldr	r0, [pc, #236]	@ (80006a0 <DHT11_Read+0x2a4>)
 80005b2:	f000 fe91 	bl	80012d8 <HAL_GPIO_ReadPin>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d0ea      	beq.n	8000592 <DHT11_Read+0x196>
          	  }
          }
      mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(&htim3);
 80005bc:	4b39      	ldr	r3, [pc, #228]	@ (80006a4 <DHT11_Read+0x2a8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
      if(mTime1 > 20 && mTime1 < 30)
 80005c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80005c6:	2b14      	cmp	r3, #20
 80005c8:	d906      	bls.n	80005d8 <DHT11_Read+0x1dc>
 80005ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80005cc:	2b1d      	cmp	r3, #29
 80005ce:	d803      	bhi.n	80005d8 <DHT11_Read+0x1dc>
      		{
      			mBit = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80005d6:	e008      	b.n	80005ea <DHT11_Read+0x1ee>
      		}
      else if(mTime1 > 60 && mTime1 < 80) //if pass time 70 uS set as HIGH
 80005d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80005da:	2b3c      	cmp	r3, #60	@ 0x3c
 80005dc:	d905      	bls.n	80005ea <DHT11_Read+0x1ee>
 80005de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80005e0:	2b4f      	cmp	r3, #79	@ 0x4f
 80005e2:	d802      	bhi.n	80005ea <DHT11_Read+0x1ee>
      		{
      			 mBit = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
      		}

      //set i th data in data buffer
      mData[j] = mBit;
 80005ea:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80005ee:	b2d9      	uxtb	r1, r3
 80005f0:	f107 020c 	add.w	r2, r7, #12
 80005f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80005f6:	4413      	add	r3, r2
 80005f8:	460a      	mov	r2, r1
 80005fa:	701a      	strb	r2, [r3, #0]
  	for(int j = 0; j < 40; j++)
 80005fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80005fe:	3301      	adds	r3, #1
 8000600:	647b      	str	r3, [r7, #68]	@ 0x44
 8000602:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000604:	2b27      	cmp	r3, #39	@ 0x27
 8000606:	dda5      	ble.n	8000554 <DHT11_Read+0x158>


      }
  		HAL_TIM_Base_Stop(&htim3); //stop timer
 8000608:	4826      	ldr	r0, [pc, #152]	@ (80006a4 <DHT11_Read+0x2a8>)
 800060a:	f001 fb3f 	bl	8001c8c <HAL_TIM_Base_Stop>
  __ASM volatile ("cpsie i" : : : "memory");
 800060e:	b662      	cpsie	i
}
 8000610:	bf00      	nop
  		__enable_irq(); //enable all interrupts

  		humVal = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  		tempVal = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  		//get hum value from data buffer
  		for(int i = 0; i < 8; i++)
 800061e:	2300      	movs	r3, #0
 8000620:	643b      	str	r3, [r7, #64]	@ 0x40
 8000622:	e011      	b.n	8000648 <DHT11_Read+0x24c>
  		{
  			humVal += mData[i];
 8000624:	f107 020c 	add.w	r2, r7, #12
 8000628:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800062a:	4413      	add	r3, r2
 800062c:	781a      	ldrb	r2, [r3, #0]
 800062e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000632:	4413      	add	r3, r2
 8000634:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  			humVal <<= 1;
 8000638:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  		for(int i = 0; i < 8; i++)
 8000642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000644:	3301      	adds	r3, #1
 8000646:	643b      	str	r3, [r7, #64]	@ 0x40
 8000648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800064a:	2b07      	cmp	r3, #7
 800064c:	ddea      	ble.n	8000624 <DHT11_Read+0x228>

  		}
  		humVal >>= 1;
 800064e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000652:	085b      	lsrs	r3, r3, #1
 8000654:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

  		//get temp value from data buffer
  		for(int i = 16; i < 24; i++)
 8000658:	2310      	movs	r3, #16
 800065a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800065c:	e011      	b.n	8000682 <DHT11_Read+0x286>
  		{
  			tempVal += mData[i];
 800065e:	f107 020c 	add.w	r2, r7, #12
 8000662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000664:	4413      	add	r3, r2
 8000666:	781a      	ldrb	r2, [r3, #0]
 8000668:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800066c:	4413      	add	r3, r2
 800066e:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  			tempVal <<= 1;
 8000672:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  		for(int i = 16; i < 24; i++)
 800067c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800067e:	3301      	adds	r3, #1
 8000680:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000684:	2b17      	cmp	r3, #23
 8000686:	ddea      	ble.n	800065e <DHT11_Read+0x262>
  		}
  		tempVal >>= 1;
 8000688:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800068c:	085b      	lsrs	r3, r3, #1
 800068e:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

  		parityVal = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  		for(int i = 32; i < 40; i++)
 8000698:	2320      	movs	r3, #32
 800069a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800069c:	e022      	b.n	80006e4 <DHT11_Read+0x2e8>
 800069e:	bf00      	nop
 80006a0:	40010800 	.word	0x40010800
 80006a4:	20000084 	.word	0x20000084
 80006a8:	08003b50 	.word	0x08003b50
 80006ac:	08003b70 	.word	0x08003b70
 80006b0:	08003b90 	.word	0x08003b90
 80006b4:	08003bb0 	.word	0x08003bb0
 80006b8:	08003bcc 	.word	0x08003bcc
 80006bc:	08003be8 	.word	0x08003be8
		{
			parityVal += mData[i];
 80006c0:	f107 020c 	add.w	r2, r7, #12
 80006c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006c6:	4413      	add	r3, r2
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80006ce:	4413      	add	r3, r2
 80006d0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
			parityVal <<= 1;
 80006d4:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  		for(int i = 32; i < 40; i++)
 80006de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006e0:	3301      	adds	r3, #1
 80006e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80006e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80006e6:	2b27      	cmp	r3, #39	@ 0x27
 80006e8:	ddea      	ble.n	80006c0 <DHT11_Read+0x2c4>

		}
  		parityVal >>= 1;
 80006ea:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80006ee:	085b      	lsrs	r3, r3, #1
 80006f0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49



  		genParity = humVal + tempVal;
 80006f4:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 80006f8:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80006fc:	4413      	add	r3, r2
 80006fe:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  		//if(parityVal != genParity)
  		//	humVal = -humVal;

  		data->temperature = tempVal;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 8000708:	705a      	strb	r2, [r3, #1]
  		data->humidity = humVal;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8000710:	709a      	strb	r2, [r3, #2]


  		return 1;
 8000712:	2301      	movs	r3, #1

  }
 8000714:	4618      	mov	r0, r3
 8000716:	3750      	adds	r7, #80	@ 0x50
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <main>:




int main(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b098      	sub	sp, #96	@ 0x60
 8000720:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f000 faeb 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f853 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072a:	f000 f90f 	bl	800094c <MX_GPIO_Init>
  MX_TIM3_Init();
 800072e:	f000 f895 	bl	800085c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000732:	f000 f8e1 	bl	80008f8 <MX_USART1_UART_Init>
  HAL_TIM_Base_Start(&htim3);
 8000736:	4821      	ldr	r0, [pc, #132]	@ (80007bc <main+0xa0>)
 8000738:	f001 fa5e 	bl	8001bf8 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN 2 */

  //DHT11_Data sensor;
  char msg[64];
  uint8_t index = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  uart_print("📟 STM32 DHT11 UART Debugger Begin\r\n");
 8000742:	481f      	ldr	r0, [pc, #124]	@ (80007c0 <main+0xa4>)
 8000744:	f7ff fdda 	bl	80002fc <uart_print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HAL_Delay(2000);  // Wait between readings
 8000748:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800074c:	f000 fb38 	bl	8000dc0 <HAL_Delay>

      DHT11_Data sensor_data;

      if (DHT11_Read(&sensor_data) == 1)
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fe51 	bl	80003fc <DHT11_Read>
 800075a:	4603      	mov	r3, r0
 800075c:	2b01      	cmp	r3, #1
 800075e:	d116      	bne.n	800078e <main+0x72>
      {
          store_values(sensor_data.temperature, sensor_data.humidity);
 8000760:	7b7b      	ldrb	r3, [r7, #13]
 8000762:	7bba      	ldrb	r2, [r7, #14]
 8000764:	4611      	mov	r1, r2
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fd76 	bl	8000258 <store_values>

          snprintf(msg, sizeof(msg), "✅ Temp: %d°C, Hum: %d%%\r\n",
                   sensor_data.temperature, sensor_data.humidity);
 800076c:	7b7b      	ldrb	r3, [r7, #13]
          snprintf(msg, sizeof(msg), "✅ Temp: %d°C, Hum: %d%%\r\n",
 800076e:	461a      	mov	r2, r3
                   sensor_data.temperature, sensor_data.humidity);
 8000770:	7bbb      	ldrb	r3, [r7, #14]
          snprintf(msg, sizeof(msg), "✅ Temp: %d°C, Hum: %d%%\r\n",
 8000772:	f107 0014 	add.w	r0, r7, #20
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	4613      	mov	r3, r2
 800077a:	4a12      	ldr	r2, [pc, #72]	@ (80007c4 <main+0xa8>)
 800077c:	2140      	movs	r1, #64	@ 0x40
 800077e:	f002 fa09 	bl	8002b94 <sniprintf>
          uart_print(msg);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fdb8 	bl	80002fc <uart_print>
 800078c:	e002      	b.n	8000794 <main+0x78>
      }
      else
      {
          uart_print("❌ DHT11 read failed\r\n");
 800078e:	480e      	ldr	r0, [pc, #56]	@ (80007c8 <main+0xac>)
 8000790:	f7ff fdb4 	bl	80002fc <uart_print>
      }

      // ✅ Add this UART check right here
      char rx_buffer[10] = {0};
 8000794:	463b      	mov	r3, r7
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	811a      	strh	r2, [r3, #8]
      if (HAL_UART_Receive(&huart1, (uint8_t *)rx_buffer, sizeof(rx_buffer)-1, 100) == HAL_OK)
 800079e:	4639      	mov	r1, r7
 80007a0:	2364      	movs	r3, #100	@ 0x64
 80007a2:	2209      	movs	r2, #9
 80007a4:	4809      	ldr	r0, [pc, #36]	@ (80007cc <main+0xb0>)
 80007a6:	f001 fd9c 	bl	80022e2 <HAL_UART_Receive>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d1cb      	bne.n	8000748 <main+0x2c>
      {
          handle_uart_command(rx_buffer);
 80007b0:	463b      	mov	r3, r7
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff fdb8 	bl	8000328 <handle_uart_command>
  {
 80007b8:	e7c6      	b.n	8000748 <main+0x2c>
 80007ba:	bf00      	nop
 80007bc:	20000084 	.word	0x20000084
 80007c0:	08003c04 	.word	0x08003c04
 80007c4:	08003c2c 	.word	0x08003c2c
 80007c8:	08003c4c 	.word	0x08003c4c
 80007cc:	200000cc 	.word	0x200000cc

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b090      	sub	sp, #64	@ 0x40
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0318 	add.w	r3, r7, #24
 80007da:	2228      	movs	r2, #40	@ 0x28
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 fae6 	bl	8002db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f2:	2301      	movs	r3, #1
 80007f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000800:	2301      	movs	r3, #1
 8000802:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000804:	2302      	movs	r3, #2
 8000806:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000808:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800080c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800080e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000812:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000814:	f107 0318 	add.w	r3, r7, #24
 8000818:	4618      	mov	r0, r3
 800081a:	f000 fd8d 	bl	8001338 <HAL_RCC_OscConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000824:	f000 f8d0 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000828:	230f      	movs	r3, #15
 800082a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082c:	2302      	movs	r3, #2
 800082e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000834:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000838:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2102      	movs	r1, #2
 8000842:	4618      	mov	r0, r3
 8000844:	f000 fffa 	bl	800183c <HAL_RCC_ClockConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800084e:	f000 f8bb 	bl	80009c8 <Error_Handler>
  }
}
 8000852:	bf00      	nop
 8000854:	3740      	adds	r7, #64	@ 0x40
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000862:	f107 0308 	add.w	r3, r7, #8
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000870:	463b      	mov	r3, r7
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000878:	4b1d      	ldr	r3, [pc, #116]	@ (80008f0 <MX_TIM3_Init+0x94>)
 800087a:	4a1e      	ldr	r2, [pc, #120]	@ (80008f4 <MX_TIM3_Init+0x98>)
 800087c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800087e:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <MX_TIM3_Init+0x94>)
 8000880:	2247      	movs	r2, #71	@ 0x47
 8000882:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000884:	4b1a      	ldr	r3, [pc, #104]	@ (80008f0 <MX_TIM3_Init+0x94>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800088a:	4b19      	ldr	r3, [pc, #100]	@ (80008f0 <MX_TIM3_Init+0x94>)
 800088c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000890:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000892:	4b17      	ldr	r3, [pc, #92]	@ (80008f0 <MX_TIM3_Init+0x94>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000898:	4b15      	ldr	r3, [pc, #84]	@ (80008f0 <MX_TIM3_Init+0x94>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800089e:	4814      	ldr	r0, [pc, #80]	@ (80008f0 <MX_TIM3_Init+0x94>)
 80008a0:	f001 f95a 	bl	8001b58 <HAL_TIM_Base_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80008aa:	f000 f88d 	bl	80009c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008b4:	f107 0308 	add.w	r3, r7, #8
 80008b8:	4619      	mov	r1, r3
 80008ba:	480d      	ldr	r0, [pc, #52]	@ (80008f0 <MX_TIM3_Init+0x94>)
 80008bc:	f001 fa0c 	bl	8001cd8 <HAL_TIM_ConfigClockSource>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80008c6:	f000 f87f 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008d2:	463b      	mov	r3, r7
 80008d4:	4619      	mov	r1, r3
 80008d6:	4806      	ldr	r0, [pc, #24]	@ (80008f0 <MX_TIM3_Init+0x94>)
 80008d8:	f001 fbca 	bl	8002070 <HAL_TIMEx_MasterConfigSynchronization>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80008e2:	f000 f871 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	3718      	adds	r7, #24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000084 	.word	0x20000084
 80008f4:	40000400 	.word	0x40000400

080008f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008fc:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <MX_USART1_UART_Init+0x4c>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	@ (8000948 <MX_USART1_UART_Init+0x50>)
 8000900:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <MX_USART1_UART_Init+0x4c>)
 8000904:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000908:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <MX_USART1_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <MX_USART1_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <MX_USART1_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <MX_USART1_UART_Init+0x4c>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <MX_USART1_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <MX_USART1_UART_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	@ (8000944 <MX_USART1_UART_Init+0x4c>)
 8000930:	f001 fbfc 	bl	800212c <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800093a:	f000 f845 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200000cc 	.word	0x200000cc
 8000948:	40013800 	.word	0x40013800

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 0308 	add.w	r3, r7, #8
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000960:	4b17      	ldr	r3, [pc, #92]	@ (80009c0 <MX_GPIO_Init+0x74>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a16      	ldr	r2, [pc, #88]	@ (80009c0 <MX_GPIO_Init+0x74>)
 8000966:	f043 0320 	orr.w	r3, r3, #32
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <MX_GPIO_Init+0x74>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f003 0320 	and.w	r3, r3, #32
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000978:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <MX_GPIO_Init+0x74>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a10      	ldr	r2, [pc, #64]	@ (80009c0 <MX_GPIO_Init+0x74>)
 800097e:	f043 0304 	orr.w	r3, r3, #4
 8000982:	6193      	str	r3, [r2, #24]
 8000984:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <MX_GPIO_Init+0x74>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_PORT, DHT11_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2102      	movs	r1, #2
 8000994:	480b      	ldr	r0, [pc, #44]	@ (80009c4 <MX_GPIO_Init+0x78>)
 8000996:	f000 fcb6 	bl	8001306 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800099a:	2302      	movs	r3, #2
 800099c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	4619      	mov	r1, r3
 80009b0:	4804      	ldr	r0, [pc, #16]	@ (80009c4 <MX_GPIO_Init+0x78>)
 80009b2:	f000 fb0d 	bl	8000fd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009b6:	bf00      	nop
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40010800 	.word	0x40010800

080009c8 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */

void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <Error_Handler+0x8>

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009da:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <HAL_MspInit+0x5c>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	4a14      	ldr	r2, [pc, #80]	@ (8000a30 <HAL_MspInit+0x5c>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6193      	str	r3, [r2, #24]
 80009e6:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <HAL_MspInit+0x5c>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <HAL_MspInit+0x5c>)
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000a30 <HAL_MspInit+0x5c>)
 80009f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009fc:	61d3      	str	r3, [r2, #28]
 80009fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <HAL_MspInit+0x5c>)
 8000a00:	69db      	ldr	r3, [r3, #28]
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a34 <HAL_MspInit+0x60>)
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	4a04      	ldr	r2, [pc, #16]	@ (8000a34 <HAL_MspInit+0x60>)
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a26:	bf00      	nop
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40010000 	.word	0x40010000

08000a38 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a09      	ldr	r2, [pc, #36]	@ (8000a6c <HAL_TIM_Base_MspInit+0x34>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d10b      	bne.n	8000a62 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a4a:	4b09      	ldr	r3, [pc, #36]	@ (8000a70 <HAL_TIM_Base_MspInit+0x38>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	4a08      	ldr	r2, [pc, #32]	@ (8000a70 <HAL_TIM_Base_MspInit+0x38>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	61d3      	str	r3, [r2, #28]
 8000a56:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <HAL_TIM_Base_MspInit+0x38>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000a62:	bf00      	nop
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	40000400 	.word	0x40000400
 8000a70:	40021000 	.word	0x40021000

08000a74 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0310 	add.w	r3, r7, #16
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8000b00 <HAL_UART_MspInit+0x8c>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d131      	bne.n	8000af8 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a94:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <HAL_UART_MspInit+0x90>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a1a      	ldr	r2, [pc, #104]	@ (8000b04 <HAL_UART_MspInit+0x90>)
 8000a9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b18      	ldr	r3, [pc, #96]	@ (8000b04 <HAL_UART_MspInit+0x90>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aac:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <HAL_UART_MspInit+0x90>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a14      	ldr	r2, [pc, #80]	@ (8000b04 <HAL_UART_MspInit+0x90>)
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b12      	ldr	r3, [pc, #72]	@ (8000b04 <HAL_UART_MspInit+0x90>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f003 0304 	and.w	r3, r3, #4
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ac4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ac8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 0310 	add.w	r3, r7, #16
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480b      	ldr	r0, [pc, #44]	@ (8000b08 <HAL_UART_MspInit+0x94>)
 8000ada:	f000 fa79 	bl	8000fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ade:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ae2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	4619      	mov	r1, r3
 8000af2:	4805      	ldr	r0, [pc, #20]	@ (8000b08 <HAL_UART_MspInit+0x94>)
 8000af4:	f000 fa6c 	bl	8000fd0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000af8:	bf00      	nop
 8000afa:	3720      	adds	r7, #32
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40013800 	.word	0x40013800
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40010800 	.word	0x40010800

08000b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <NMI_Handler+0x4>

08000b14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <MemManage_Handler+0x4>

08000b24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5c:	f000 f914 	bl	8000d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	e00a      	b.n	8000b8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b76:	f3af 8000 	nop.w
 8000b7a:	4601      	mov	r1, r0
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	60ba      	str	r2, [r7, #8]
 8000b82:	b2ca      	uxtb	r2, r1
 8000b84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	697a      	ldr	r2, [r7, #20]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	dbf0      	blt.n	8000b76 <_read+0x12>
  }

  return len;
 8000b94:	687b      	ldr	r3, [r7, #4]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b086      	sub	sp, #24
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	60f8      	str	r0, [r7, #12]
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	e009      	b.n	8000bc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	1c5a      	adds	r2, r3, #1
 8000bb4:	60ba      	str	r2, [r7, #8]
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697a      	ldr	r2, [r7, #20]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	dbf1      	blt.n	8000bb0 <_write+0x12>
  }
  return len;
 8000bcc:	687b      	ldr	r3, [r7, #4]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <_close>:

int _close(int file)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr

08000bec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bfc:	605a      	str	r2, [r3, #4]
  return 0;
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr

08000c0a <_isatty>:

int _isatty(int file)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c12:	2301      	movs	r3, #1
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr

08000c1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b085      	sub	sp, #20
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	60f8      	str	r0, [r7, #12]
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
	...

08000c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c40:	4a14      	ldr	r2, [pc, #80]	@ (8000c94 <_sbrk+0x5c>)
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <_sbrk+0x60>)
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c4c:	4b13      	ldr	r3, [pc, #76]	@ (8000c9c <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d102      	bne.n	8000c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c54:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <_sbrk+0x64>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	@ (8000ca0 <_sbrk+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5a:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d207      	bcs.n	8000c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c68:	f002 f900 	bl	8002e6c <__errno>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	220c      	movs	r2, #12
 8000c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	e009      	b.n	8000c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c7e:	4b07      	ldr	r3, [pc, #28]	@ (8000c9c <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	4a05      	ldr	r2, [pc, #20]	@ (8000c9c <_sbrk+0x64>)
 8000c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20005000 	.word	0x20005000
 8000c98:	00000400 	.word	0x00000400
 8000c9c:	20000120 	.word	0x20000120
 8000ca0:	20000278 	.word	0x20000278

08000ca4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr

08000cb0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb0:	f7ff fff8 	bl	8000ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb4:	480b      	ldr	r0, [pc, #44]	@ (8000ce4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cb6:	490c      	ldr	r1, [pc, #48]	@ (8000ce8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cb8:	4a0c      	ldr	r2, [pc, #48]	@ (8000cec <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a09      	ldr	r2, [pc, #36]	@ (8000cf0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ccc:	4c09      	ldr	r4, [pc, #36]	@ (8000cf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cda:	f002 f8cd 	bl	8002e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cde:	f7ff fd1d 	bl	800071c <main>
  bx lr
 8000ce2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000cec:	08003dd4 	.word	0x08003dd4
  ldr r2, =_sbss
 8000cf0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000cf4:	20000274 	.word	0x20000274

08000cf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC1_2_IRQHandler>
	...

08000cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d00:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <HAL_Init+0x28>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a07      	ldr	r2, [pc, #28]	@ (8000d24 <HAL_Init+0x28>)
 8000d06:	f043 0310 	orr.w	r3, r3, #16
 8000d0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f000 f92b 	bl	8000f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d12:	200f      	movs	r0, #15
 8000d14:	f000 f808 	bl	8000d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d18:	f7ff fe5c 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40022000 	.word	0x40022000

08000d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d30:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <HAL_InitTick+0x54>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b12      	ldr	r3, [pc, #72]	@ (8000d80 <HAL_InitTick+0x58>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f935 	bl	8000fb6 <HAL_SYSTICK_Config>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00e      	b.n	8000d74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b0f      	cmp	r3, #15
 8000d5a:	d80a      	bhi.n	8000d72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f000 f90b 	bl	8000f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d68:	4a06      	ldr	r2, [pc, #24]	@ (8000d84 <HAL_InitTick+0x5c>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e000      	b.n	8000d74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20000008 	.word	0x20000008
 8000d84:	20000004 	.word	0x20000004

08000d88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d8c:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <HAL_IncTick+0x1c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <HAL_IncTick+0x20>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	4a03      	ldr	r2, [pc, #12]	@ (8000da8 <HAL_IncTick+0x20>)
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	20000008 	.word	0x20000008
 8000da8:	20000124 	.word	0x20000124

08000dac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b02      	ldr	r3, [pc, #8]	@ (8000dbc <HAL_GetTick+0x10>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	20000124 	.word	0x20000124

08000dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc8:	f7ff fff0 	bl	8000dac <HAL_GetTick>
 8000dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd8:	d005      	beq.n	8000de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dda:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <HAL_Delay+0x44>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4413      	add	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000de6:	bf00      	nop
 8000de8:	f7ff ffe0 	bl	8000dac <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d8f7      	bhi.n	8000de8 <HAL_Delay+0x28>
  {
  }
}
 8000df8:	bf00      	nop
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000008 	.word	0x20000008

08000e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e18:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e24:	4013      	ands	r3, r2
 8000e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3a:	4a04      	ldr	r2, [pc, #16]	@ (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	60d3      	str	r3, [r2, #12]
}
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e54:	4b04      	ldr	r3, [pc, #16]	@ (8000e68 <__NVIC_GetPriorityGrouping+0x18>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	f003 0307 	and.w	r3, r3, #7
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	db0a      	blt.n	8000e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	490c      	ldr	r1, [pc, #48]	@ (8000eb8 <__NVIC_SetPriority+0x4c>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	0112      	lsls	r2, r2, #4
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	440b      	add	r3, r1
 8000e90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e94:	e00a      	b.n	8000eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4908      	ldr	r1, [pc, #32]	@ (8000ebc <__NVIC_SetPriority+0x50>)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	3b04      	subs	r3, #4
 8000ea4:	0112      	lsls	r2, r2, #4
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	761a      	strb	r2, [r3, #24]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000e100 	.word	0xe000e100
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	@ 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f1c3 0307 	rsb	r3, r3, #7
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	bf28      	it	cs
 8000ede:	2304      	movcs	r3, #4
 8000ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	2b06      	cmp	r3, #6
 8000ee8:	d902      	bls.n	8000ef0 <NVIC_EncodePriority+0x30>
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3b03      	subs	r3, #3
 8000eee:	e000      	b.n	8000ef2 <NVIC_EncodePriority+0x32>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43da      	mvns	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	401a      	ands	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f08:	f04f 31ff 	mov.w	r1, #4294967295
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	43d9      	mvns	r1, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	4313      	orrs	r3, r2
         );
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3724      	adds	r7, #36	@ 0x24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr

08000f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f34:	d301      	bcc.n	8000f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00f      	b.n	8000f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f64 <SysTick_Config+0x40>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f42:	210f      	movs	r1, #15
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f7ff ff90 	bl	8000e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f4c:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <SysTick_Config+0x40>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f52:	4b04      	ldr	r3, [pc, #16]	@ (8000f64 <SysTick_Config+0x40>)
 8000f54:	2207      	movs	r2, #7
 8000f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	e000e010 	.word	0xe000e010

08000f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ff49 	bl	8000e08 <__NVIC_SetPriorityGrouping>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b086      	sub	sp, #24
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f90:	f7ff ff5e 	bl	8000e50 <__NVIC_GetPriorityGrouping>
 8000f94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	68b9      	ldr	r1, [r7, #8]
 8000f9a:	6978      	ldr	r0, [r7, #20]
 8000f9c:	f7ff ff90 	bl	8000ec0 <NVIC_EncodePriority>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff5f 	bl	8000e6c <__NVIC_SetPriority>
}
 8000fae:	bf00      	nop
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ffb0 	bl	8000f24 <SysTick_Config>
 8000fc4:	4603      	mov	r3, r0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b08b      	sub	sp, #44	@ 0x2c
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe2:	e169      	b.n	80012b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	f040 8158 	bne.w	80012b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	4a9a      	ldr	r2, [pc, #616]	@ (8001270 <HAL_GPIO_Init+0x2a0>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d05e      	beq.n	80010ca <HAL_GPIO_Init+0xfa>
 800100c:	4a98      	ldr	r2, [pc, #608]	@ (8001270 <HAL_GPIO_Init+0x2a0>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d875      	bhi.n	80010fe <HAL_GPIO_Init+0x12e>
 8001012:	4a98      	ldr	r2, [pc, #608]	@ (8001274 <HAL_GPIO_Init+0x2a4>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d058      	beq.n	80010ca <HAL_GPIO_Init+0xfa>
 8001018:	4a96      	ldr	r2, [pc, #600]	@ (8001274 <HAL_GPIO_Init+0x2a4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d86f      	bhi.n	80010fe <HAL_GPIO_Init+0x12e>
 800101e:	4a96      	ldr	r2, [pc, #600]	@ (8001278 <HAL_GPIO_Init+0x2a8>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d052      	beq.n	80010ca <HAL_GPIO_Init+0xfa>
 8001024:	4a94      	ldr	r2, [pc, #592]	@ (8001278 <HAL_GPIO_Init+0x2a8>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d869      	bhi.n	80010fe <HAL_GPIO_Init+0x12e>
 800102a:	4a94      	ldr	r2, [pc, #592]	@ (800127c <HAL_GPIO_Init+0x2ac>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d04c      	beq.n	80010ca <HAL_GPIO_Init+0xfa>
 8001030:	4a92      	ldr	r2, [pc, #584]	@ (800127c <HAL_GPIO_Init+0x2ac>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d863      	bhi.n	80010fe <HAL_GPIO_Init+0x12e>
 8001036:	4a92      	ldr	r2, [pc, #584]	@ (8001280 <HAL_GPIO_Init+0x2b0>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d046      	beq.n	80010ca <HAL_GPIO_Init+0xfa>
 800103c:	4a90      	ldr	r2, [pc, #576]	@ (8001280 <HAL_GPIO_Init+0x2b0>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d85d      	bhi.n	80010fe <HAL_GPIO_Init+0x12e>
 8001042:	2b12      	cmp	r3, #18
 8001044:	d82a      	bhi.n	800109c <HAL_GPIO_Init+0xcc>
 8001046:	2b12      	cmp	r3, #18
 8001048:	d859      	bhi.n	80010fe <HAL_GPIO_Init+0x12e>
 800104a:	a201      	add	r2, pc, #4	@ (adr r2, 8001050 <HAL_GPIO_Init+0x80>)
 800104c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001050:	080010cb 	.word	0x080010cb
 8001054:	080010a5 	.word	0x080010a5
 8001058:	080010b7 	.word	0x080010b7
 800105c:	080010f9 	.word	0x080010f9
 8001060:	080010ff 	.word	0x080010ff
 8001064:	080010ff 	.word	0x080010ff
 8001068:	080010ff 	.word	0x080010ff
 800106c:	080010ff 	.word	0x080010ff
 8001070:	080010ff 	.word	0x080010ff
 8001074:	080010ff 	.word	0x080010ff
 8001078:	080010ff 	.word	0x080010ff
 800107c:	080010ff 	.word	0x080010ff
 8001080:	080010ff 	.word	0x080010ff
 8001084:	080010ff 	.word	0x080010ff
 8001088:	080010ff 	.word	0x080010ff
 800108c:	080010ff 	.word	0x080010ff
 8001090:	080010ff 	.word	0x080010ff
 8001094:	080010ad 	.word	0x080010ad
 8001098:	080010c1 	.word	0x080010c1
 800109c:	4a79      	ldr	r2, [pc, #484]	@ (8001284 <HAL_GPIO_Init+0x2b4>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d013      	beq.n	80010ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010a2:	e02c      	b.n	80010fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	623b      	str	r3, [r7, #32]
          break;
 80010aa:	e029      	b.n	8001100 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	3304      	adds	r3, #4
 80010b2:	623b      	str	r3, [r7, #32]
          break;
 80010b4:	e024      	b.n	8001100 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	3308      	adds	r3, #8
 80010bc:	623b      	str	r3, [r7, #32]
          break;
 80010be:	e01f      	b.n	8001100 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	330c      	adds	r3, #12
 80010c6:	623b      	str	r3, [r7, #32]
          break;
 80010c8:	e01a      	b.n	8001100 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d102      	bne.n	80010d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010d2:	2304      	movs	r3, #4
 80010d4:	623b      	str	r3, [r7, #32]
          break;
 80010d6:	e013      	b.n	8001100 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d105      	bne.n	80010ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010e0:	2308      	movs	r3, #8
 80010e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69fa      	ldr	r2, [r7, #28]
 80010e8:	611a      	str	r2, [r3, #16]
          break;
 80010ea:	e009      	b.n	8001100 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010ec:	2308      	movs	r3, #8
 80010ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69fa      	ldr	r2, [r7, #28]
 80010f4:	615a      	str	r2, [r3, #20]
          break;
 80010f6:	e003      	b.n	8001100 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
          break;
 80010fc:	e000      	b.n	8001100 <HAL_GPIO_Init+0x130>
          break;
 80010fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	2bff      	cmp	r3, #255	@ 0xff
 8001104:	d801      	bhi.n	800110a <HAL_GPIO_Init+0x13a>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	e001      	b.n	800110e <HAL_GPIO_Init+0x13e>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3304      	adds	r3, #4
 800110e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	2bff      	cmp	r3, #255	@ 0xff
 8001114:	d802      	bhi.n	800111c <HAL_GPIO_Init+0x14c>
 8001116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	e002      	b.n	8001122 <HAL_GPIO_Init+0x152>
 800111c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111e:	3b08      	subs	r3, #8
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	210f      	movs	r1, #15
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	fa01 f303 	lsl.w	r3, r1, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	401a      	ands	r2, r3
 8001134:	6a39      	ldr	r1, [r7, #32]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	431a      	orrs	r2, r3
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 80b1 	beq.w	80012b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001150:	4b4d      	ldr	r3, [pc, #308]	@ (8001288 <HAL_GPIO_Init+0x2b8>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a4c      	ldr	r2, [pc, #304]	@ (8001288 <HAL_GPIO_Init+0x2b8>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b4a      	ldr	r3, [pc, #296]	@ (8001288 <HAL_GPIO_Init+0x2b8>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001168:	4a48      	ldr	r2, [pc, #288]	@ (800128c <HAL_GPIO_Init+0x2bc>)
 800116a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001174:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	220f      	movs	r2, #15
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	4013      	ands	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a40      	ldr	r2, [pc, #256]	@ (8001290 <HAL_GPIO_Init+0x2c0>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d013      	beq.n	80011bc <HAL_GPIO_Init+0x1ec>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a3f      	ldr	r2, [pc, #252]	@ (8001294 <HAL_GPIO_Init+0x2c4>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d00d      	beq.n	80011b8 <HAL_GPIO_Init+0x1e8>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a3e      	ldr	r2, [pc, #248]	@ (8001298 <HAL_GPIO_Init+0x2c8>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d007      	beq.n	80011b4 <HAL_GPIO_Init+0x1e4>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a3d      	ldr	r2, [pc, #244]	@ (800129c <HAL_GPIO_Init+0x2cc>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d101      	bne.n	80011b0 <HAL_GPIO_Init+0x1e0>
 80011ac:	2303      	movs	r3, #3
 80011ae:	e006      	b.n	80011be <HAL_GPIO_Init+0x1ee>
 80011b0:	2304      	movs	r3, #4
 80011b2:	e004      	b.n	80011be <HAL_GPIO_Init+0x1ee>
 80011b4:	2302      	movs	r3, #2
 80011b6:	e002      	b.n	80011be <HAL_GPIO_Init+0x1ee>
 80011b8:	2301      	movs	r3, #1
 80011ba:	e000      	b.n	80011be <HAL_GPIO_Init+0x1ee>
 80011bc:	2300      	movs	r3, #0
 80011be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011c0:	f002 0203 	and.w	r2, r2, #3
 80011c4:	0092      	lsls	r2, r2, #2
 80011c6:	4093      	lsls	r3, r2
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011ce:	492f      	ldr	r1, [pc, #188]	@ (800128c <HAL_GPIO_Init+0x2bc>)
 80011d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d2:	089b      	lsrs	r3, r3, #2
 80011d4:	3302      	adds	r3, #2
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d006      	beq.n	80011f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011e8:	4b2d      	ldr	r3, [pc, #180]	@ (80012a0 <HAL_GPIO_Init+0x2d0>)
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	492c      	ldr	r1, [pc, #176]	@ (80012a0 <HAL_GPIO_Init+0x2d0>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	608b      	str	r3, [r1, #8]
 80011f4:	e006      	b.n	8001204 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011f6:	4b2a      	ldr	r3, [pc, #168]	@ (80012a0 <HAL_GPIO_Init+0x2d0>)
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	4928      	ldr	r1, [pc, #160]	@ (80012a0 <HAL_GPIO_Init+0x2d0>)
 8001200:	4013      	ands	r3, r2
 8001202:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d006      	beq.n	800121e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001210:	4b23      	ldr	r3, [pc, #140]	@ (80012a0 <HAL_GPIO_Init+0x2d0>)
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	4922      	ldr	r1, [pc, #136]	@ (80012a0 <HAL_GPIO_Init+0x2d0>)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	60cb      	str	r3, [r1, #12]
 800121c:	e006      	b.n	800122c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800121e:	4b20      	ldr	r3, [pc, #128]	@ (80012a0 <HAL_GPIO_Init+0x2d0>)
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	43db      	mvns	r3, r3
 8001226:	491e      	ldr	r1, [pc, #120]	@ (80012a0 <HAL_GPIO_Init+0x2d0>)
 8001228:	4013      	ands	r3, r2
 800122a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d006      	beq.n	8001246 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001238:	4b19      	ldr	r3, [pc, #100]	@ (80012a0 <HAL_GPIO_Init+0x2d0>)
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	4918      	ldr	r1, [pc, #96]	@ (80012a0 <HAL_GPIO_Init+0x2d0>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	604b      	str	r3, [r1, #4]
 8001244:	e006      	b.n	8001254 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001246:	4b16      	ldr	r3, [pc, #88]	@ (80012a0 <HAL_GPIO_Init+0x2d0>)
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	43db      	mvns	r3, r3
 800124e:	4914      	ldr	r1, [pc, #80]	@ (80012a0 <HAL_GPIO_Init+0x2d0>)
 8001250:	4013      	ands	r3, r2
 8001252:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d021      	beq.n	80012a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001260:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <HAL_GPIO_Init+0x2d0>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	490e      	ldr	r1, [pc, #56]	@ (80012a0 <HAL_GPIO_Init+0x2d0>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	600b      	str	r3, [r1, #0]
 800126c:	e021      	b.n	80012b2 <HAL_GPIO_Init+0x2e2>
 800126e:	bf00      	nop
 8001270:	10320000 	.word	0x10320000
 8001274:	10310000 	.word	0x10310000
 8001278:	10220000 	.word	0x10220000
 800127c:	10210000 	.word	0x10210000
 8001280:	10120000 	.word	0x10120000
 8001284:	10110000 	.word	0x10110000
 8001288:	40021000 	.word	0x40021000
 800128c:	40010000 	.word	0x40010000
 8001290:	40010800 	.word	0x40010800
 8001294:	40010c00 	.word	0x40010c00
 8001298:	40011000 	.word	0x40011000
 800129c:	40011400 	.word	0x40011400
 80012a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012a4:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <HAL_GPIO_Init+0x304>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	4909      	ldr	r1, [pc, #36]	@ (80012d4 <HAL_GPIO_Init+0x304>)
 80012ae:	4013      	ands	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b4:	3301      	adds	r3, #1
 80012b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012be:	fa22 f303 	lsr.w	r3, r2, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f47f ae8e 	bne.w	8000fe4 <HAL_GPIO_Init+0x14>
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	372c      	adds	r7, #44	@ 0x2c
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	40010400 	.word	0x40010400

080012d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	887b      	ldrh	r3, [r7, #2]
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012f0:	2301      	movs	r3, #1
 80012f2:	73fb      	strb	r3, [r7, #15]
 80012f4:	e001      	b.n	80012fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012f6:	2300      	movs	r3, #0
 80012f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr

08001306 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	460b      	mov	r3, r1
 8001310:	807b      	strh	r3, [r7, #2]
 8001312:	4613      	mov	r3, r2
 8001314:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001316:	787b      	ldrb	r3, [r7, #1]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800131c:	887a      	ldrh	r2, [r7, #2]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001322:	e003      	b.n	800132c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001324:	887b      	ldrh	r3, [r7, #2]
 8001326:	041a      	lsls	r2, r3, #16
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	611a      	str	r2, [r3, #16]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
	...

08001338 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e272      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 8087 	beq.w	8001466 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001358:	4b92      	ldr	r3, [pc, #584]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 030c 	and.w	r3, r3, #12
 8001360:	2b04      	cmp	r3, #4
 8001362:	d00c      	beq.n	800137e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001364:	4b8f      	ldr	r3, [pc, #572]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 030c 	and.w	r3, r3, #12
 800136c:	2b08      	cmp	r3, #8
 800136e:	d112      	bne.n	8001396 <HAL_RCC_OscConfig+0x5e>
 8001370:	4b8c      	ldr	r3, [pc, #560]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800137c:	d10b      	bne.n	8001396 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137e:	4b89      	ldr	r3, [pc, #548]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d06c      	beq.n	8001464 <HAL_RCC_OscConfig+0x12c>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d168      	bne.n	8001464 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e24c      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800139e:	d106      	bne.n	80013ae <HAL_RCC_OscConfig+0x76>
 80013a0:	4b80      	ldr	r3, [pc, #512]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a7f      	ldr	r2, [pc, #508]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	e02e      	b.n	800140c <HAL_RCC_OscConfig+0xd4>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10c      	bne.n	80013d0 <HAL_RCC_OscConfig+0x98>
 80013b6:	4b7b      	ldr	r3, [pc, #492]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a7a      	ldr	r2, [pc, #488]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	4b78      	ldr	r3, [pc, #480]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a77      	ldr	r2, [pc, #476]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	e01d      	b.n	800140c <HAL_RCC_OscConfig+0xd4>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013d8:	d10c      	bne.n	80013f4 <HAL_RCC_OscConfig+0xbc>
 80013da:	4b72      	ldr	r3, [pc, #456]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a71      	ldr	r2, [pc, #452]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	4b6f      	ldr	r3, [pc, #444]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a6e      	ldr	r2, [pc, #440]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e00b      	b.n	800140c <HAL_RCC_OscConfig+0xd4>
 80013f4:	4b6b      	ldr	r3, [pc, #428]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a6a      	ldr	r2, [pc, #424]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80013fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b68      	ldr	r3, [pc, #416]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a67      	ldr	r2, [pc, #412]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001406:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800140a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d013      	beq.n	800143c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fcca 	bl	8000dac <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800141c:	f7ff fcc6 	bl	8000dac <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	@ 0x64
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e200      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142e:	4b5d      	ldr	r3, [pc, #372]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0xe4>
 800143a:	e014      	b.n	8001466 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143c:	f7ff fcb6 	bl	8000dac <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001444:	f7ff fcb2 	bl	8000dac <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b64      	cmp	r3, #100	@ 0x64
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e1ec      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001456:	4b53      	ldr	r3, [pc, #332]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f0      	bne.n	8001444 <HAL_RCC_OscConfig+0x10c>
 8001462:	e000      	b.n	8001466 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d063      	beq.n	800153a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001472:	4b4c      	ldr	r3, [pc, #304]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00b      	beq.n	8001496 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800147e:	4b49      	ldr	r3, [pc, #292]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b08      	cmp	r3, #8
 8001488:	d11c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x18c>
 800148a:	4b46      	ldr	r3, [pc, #280]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d116      	bne.n	80014c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001496:	4b43      	ldr	r3, [pc, #268]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <HAL_RCC_OscConfig+0x176>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d001      	beq.n	80014ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e1c0      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ae:	4b3d      	ldr	r3, [pc, #244]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4939      	ldr	r1, [pc, #228]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c2:	e03a      	b.n	800153a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d020      	beq.n	800150e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014cc:	4b36      	ldr	r3, [pc, #216]	@ (80015a8 <HAL_RCC_OscConfig+0x270>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d2:	f7ff fc6b 	bl	8000dac <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014da:	f7ff fc67 	bl	8000dac <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e1a1      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ec:	4b2d      	ldr	r3, [pc, #180]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f8:	4b2a      	ldr	r3, [pc, #168]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	4927      	ldr	r1, [pc, #156]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001508:	4313      	orrs	r3, r2
 800150a:	600b      	str	r3, [r1, #0]
 800150c:	e015      	b.n	800153a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800150e:	4b26      	ldr	r3, [pc, #152]	@ (80015a8 <HAL_RCC_OscConfig+0x270>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fc4a 	bl	8000dac <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800151c:	f7ff fc46 	bl	8000dac <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e180      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152e:	4b1d      	ldr	r3, [pc, #116]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b00      	cmp	r3, #0
 8001544:	d03a      	beq.n	80015bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d019      	beq.n	8001582 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154e:	4b17      	ldr	r3, [pc, #92]	@ (80015ac <HAL_RCC_OscConfig+0x274>)
 8001550:	2201      	movs	r2, #1
 8001552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001554:	f7ff fc2a 	bl	8000dac <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800155c:	f7ff fc26 	bl	8000dac <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e160      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156e:	4b0d      	ldr	r3, [pc, #52]	@ (80015a4 <HAL_RCC_OscConfig+0x26c>)
 8001570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800157a:	2001      	movs	r0, #1
 800157c:	f000 face 	bl	8001b1c <RCC_Delay>
 8001580:	e01c      	b.n	80015bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001582:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <HAL_RCC_OscConfig+0x274>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001588:	f7ff fc10 	bl	8000dac <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158e:	e00f      	b.n	80015b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001590:	f7ff fc0c 	bl	8000dac <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d908      	bls.n	80015b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e146      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000
 80015a8:	42420000 	.word	0x42420000
 80015ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b0:	4b92      	ldr	r3, [pc, #584]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80015b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1e9      	bne.n	8001590 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 80a6 	beq.w	8001716 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ca:	2300      	movs	r3, #0
 80015cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ce:	4b8b      	ldr	r3, [pc, #556]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10d      	bne.n	80015f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015da:	4b88      	ldr	r3, [pc, #544]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	4a87      	ldr	r2, [pc, #540]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e4:	61d3      	str	r3, [r2, #28]
 80015e6:	4b85      	ldr	r3, [pc, #532]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015f2:	2301      	movs	r3, #1
 80015f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f6:	4b82      	ldr	r3, [pc, #520]	@ (8001800 <HAL_RCC_OscConfig+0x4c8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d118      	bne.n	8001634 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001602:	4b7f      	ldr	r3, [pc, #508]	@ (8001800 <HAL_RCC_OscConfig+0x4c8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a7e      	ldr	r2, [pc, #504]	@ (8001800 <HAL_RCC_OscConfig+0x4c8>)
 8001608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800160c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800160e:	f7ff fbcd 	bl	8000dac <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001616:	f7ff fbc9 	bl	8000dac <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b64      	cmp	r3, #100	@ 0x64
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e103      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001628:	4b75      	ldr	r3, [pc, #468]	@ (8001800 <HAL_RCC_OscConfig+0x4c8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d106      	bne.n	800164a <HAL_RCC_OscConfig+0x312>
 800163c:	4b6f      	ldr	r3, [pc, #444]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4a6e      	ldr	r2, [pc, #440]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6213      	str	r3, [r2, #32]
 8001648:	e02d      	b.n	80016a6 <HAL_RCC_OscConfig+0x36e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10c      	bne.n	800166c <HAL_RCC_OscConfig+0x334>
 8001652:	4b6a      	ldr	r3, [pc, #424]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	4a69      	ldr	r2, [pc, #420]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001658:	f023 0301 	bic.w	r3, r3, #1
 800165c:	6213      	str	r3, [r2, #32]
 800165e:	4b67      	ldr	r3, [pc, #412]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	4a66      	ldr	r2, [pc, #408]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001664:	f023 0304 	bic.w	r3, r3, #4
 8001668:	6213      	str	r3, [r2, #32]
 800166a:	e01c      	b.n	80016a6 <HAL_RCC_OscConfig+0x36e>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	2b05      	cmp	r3, #5
 8001672:	d10c      	bne.n	800168e <HAL_RCC_OscConfig+0x356>
 8001674:	4b61      	ldr	r3, [pc, #388]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4a60      	ldr	r2, [pc, #384]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 800167a:	f043 0304 	orr.w	r3, r3, #4
 800167e:	6213      	str	r3, [r2, #32]
 8001680:	4b5e      	ldr	r3, [pc, #376]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	4a5d      	ldr	r2, [pc, #372]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6213      	str	r3, [r2, #32]
 800168c:	e00b      	b.n	80016a6 <HAL_RCC_OscConfig+0x36e>
 800168e:	4b5b      	ldr	r3, [pc, #364]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	4a5a      	ldr	r2, [pc, #360]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	6213      	str	r3, [r2, #32]
 800169a:	4b58      	ldr	r3, [pc, #352]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	4a57      	ldr	r2, [pc, #348]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	f023 0304 	bic.w	r3, r3, #4
 80016a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d015      	beq.n	80016da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ae:	f7ff fb7d 	bl	8000dac <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b4:	e00a      	b.n	80016cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b6:	f7ff fb79 	bl	8000dac <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e0b1      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016cc:	4b4b      	ldr	r3, [pc, #300]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0ee      	beq.n	80016b6 <HAL_RCC_OscConfig+0x37e>
 80016d8:	e014      	b.n	8001704 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016da:	f7ff fb67 	bl	8000dac <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e0:	e00a      	b.n	80016f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e2:	f7ff fb63 	bl	8000dac <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e09b      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f8:	4b40      	ldr	r3, [pc, #256]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1ee      	bne.n	80016e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001704:	7dfb      	ldrb	r3, [r7, #23]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d105      	bne.n	8001716 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800170a:	4b3c      	ldr	r3, [pc, #240]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	4a3b      	ldr	r2, [pc, #236]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001710:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001714:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 8087 	beq.w	800182e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001720:	4b36      	ldr	r3, [pc, #216]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 030c 	and.w	r3, r3, #12
 8001728:	2b08      	cmp	r3, #8
 800172a:	d061      	beq.n	80017f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d146      	bne.n	80017c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001734:	4b33      	ldr	r3, [pc, #204]	@ (8001804 <HAL_RCC_OscConfig+0x4cc>)
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173a:	f7ff fb37 	bl	8000dac <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001742:	f7ff fb33 	bl	8000dac <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e06d      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001754:	4b29      	ldr	r3, [pc, #164]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1f0      	bne.n	8001742 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001768:	d108      	bne.n	800177c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800176a:	4b24      	ldr	r3, [pc, #144]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	4921      	ldr	r1, [pc, #132]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800177c:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a19      	ldr	r1, [r3, #32]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178c:	430b      	orrs	r3, r1
 800178e:	491b      	ldr	r1, [pc, #108]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001794:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <HAL_RCC_OscConfig+0x4cc>)
 8001796:	2201      	movs	r2, #1
 8001798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179a:	f7ff fb07 	bl	8000dac <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a2:	f7ff fb03 	bl	8000dac <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e03d      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017b4:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0f0      	beq.n	80017a2 <HAL_RCC_OscConfig+0x46a>
 80017c0:	e035      	b.n	800182e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c2:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <HAL_RCC_OscConfig+0x4cc>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7ff faf0 	bl	8000dac <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d0:	f7ff faec 	bl	8000dac <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e026      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e2:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_RCC_OscConfig+0x4c4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x498>
 80017ee:	e01e      	b.n	800182e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d107      	bne.n	8001808 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e019      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
 80017fc:	40021000 	.word	0x40021000
 8001800:	40007000 	.word	0x40007000
 8001804:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001808:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <HAL_RCC_OscConfig+0x500>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	429a      	cmp	r2, r3
 800181a:	d106      	bne.n	800182a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001826:	429a      	cmp	r2, r3
 8001828:	d001      	beq.n	800182e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40021000 	.word	0x40021000

0800183c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e0d0      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001850:	4b6a      	ldr	r3, [pc, #424]	@ (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d910      	bls.n	8001880 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185e:	4b67      	ldr	r3, [pc, #412]	@ (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 0207 	bic.w	r2, r3, #7
 8001866:	4965      	ldr	r1, [pc, #404]	@ (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	4313      	orrs	r3, r2
 800186c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800186e:	4b63      	ldr	r3, [pc, #396]	@ (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d001      	beq.n	8001880 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e0b8      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d020      	beq.n	80018ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001898:	4b59      	ldr	r3, [pc, #356]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	4a58      	ldr	r2, [pc, #352]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 800189e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80018a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b0:	4b53      	ldr	r3, [pc, #332]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	4a52      	ldr	r2, [pc, #328]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80018b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80018ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018bc:	4b50      	ldr	r3, [pc, #320]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	494d      	ldr	r1, [pc, #308]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d040      	beq.n	800195c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d107      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e2:	4b47      	ldr	r3, [pc, #284]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d115      	bne.n	800191a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e07f      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d107      	bne.n	800190a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fa:	4b41      	ldr	r3, [pc, #260]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d109      	bne.n	800191a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e073      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e06b      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800191a:	4b39      	ldr	r3, [pc, #228]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f023 0203 	bic.w	r2, r3, #3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	4936      	ldr	r1, [pc, #216]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800192c:	f7ff fa3e 	bl	8000dac <HAL_GetTick>
 8001930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001932:	e00a      	b.n	800194a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001934:	f7ff fa3a 	bl	8000dac <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001942:	4293      	cmp	r3, r2
 8001944:	d901      	bls.n	800194a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e053      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 020c 	and.w	r2, r3, #12
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	429a      	cmp	r2, r3
 800195a:	d1eb      	bne.n	8001934 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800195c:	4b27      	ldr	r3, [pc, #156]	@ (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d210      	bcs.n	800198c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196a:	4b24      	ldr	r3, [pc, #144]	@ (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 0207 	bic.w	r2, r3, #7
 8001972:	4922      	ldr	r1, [pc, #136]	@ (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197a:	4b20      	ldr	r3, [pc, #128]	@ (80019fc <HAL_RCC_ClockConfig+0x1c0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e032      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d008      	beq.n	80019aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001998:	4b19      	ldr	r3, [pc, #100]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4916      	ldr	r1, [pc, #88]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d009      	beq.n	80019ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019b6:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	490e      	ldr	r1, [pc, #56]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019ca:	f000 f821 	bl	8001a10 <HAL_RCC_GetSysClockFreq>
 80019ce:	4602      	mov	r2, r0
 80019d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c4>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	490a      	ldr	r1, [pc, #40]	@ (8001a04 <HAL_RCC_ClockConfig+0x1c8>)
 80019dc:	5ccb      	ldrb	r3, [r1, r3]
 80019de:	fa22 f303 	lsr.w	r3, r2, r3
 80019e2:	4a09      	ldr	r2, [pc, #36]	@ (8001a08 <HAL_RCC_ClockConfig+0x1cc>)
 80019e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <HAL_RCC_ClockConfig+0x1d0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff f99c 	bl	8000d28 <HAL_InitTick>

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40022000 	.word	0x40022000
 8001a00:	40021000 	.word	0x40021000
 8001a04:	08003c64 	.word	0x08003c64
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	20000004 	.word	0x20000004

08001a10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b087      	sub	sp, #28
 8001a14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	2300      	movs	r3, #0
 8001a24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f003 030c 	and.w	r3, r3, #12
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d002      	beq.n	8001a40 <HAL_RCC_GetSysClockFreq+0x30>
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d003      	beq.n	8001a46 <HAL_RCC_GetSysClockFreq+0x36>
 8001a3e:	e027      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a40:	4b19      	ldr	r3, [pc, #100]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a42:	613b      	str	r3, [r7, #16]
      break;
 8001a44:	e027      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	0c9b      	lsrs	r3, r3, #18
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	4a17      	ldr	r2, [pc, #92]	@ (8001aac <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a50:	5cd3      	ldrb	r3, [r2, r3]
 8001a52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d010      	beq.n	8001a80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a5e:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	0c5b      	lsrs	r3, r3, #17
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	4a11      	ldr	r2, [pc, #68]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a6a:	5cd3      	ldrb	r3, [r2, r3]
 8001a6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a72:	fb03 f202 	mul.w	r2, r3, r2
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	e004      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a0c      	ldr	r2, [pc, #48]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a84:	fb02 f303 	mul.w	r3, r2, r3
 8001a88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	613b      	str	r3, [r7, #16]
      break;
 8001a8e:	e002      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a90:	4b05      	ldr	r3, [pc, #20]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a92:	613b      	str	r3, [r7, #16]
      break;
 8001a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a96:	693b      	ldr	r3, [r7, #16]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	371c      	adds	r7, #28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	007a1200 	.word	0x007a1200
 8001aac:	08003c7c 	.word	0x08003c7c
 8001ab0:	08003c8c 	.word	0x08003c8c
 8001ab4:	003d0900 	.word	0x003d0900

08001ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001abc:	4b02      	ldr	r3, [pc, #8]	@ (8001ac8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	20000000 	.word	0x20000000

08001acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ad0:	f7ff fff2 	bl	8001ab8 <HAL_RCC_GetHCLKFreq>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	0a1b      	lsrs	r3, r3, #8
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	4903      	ldr	r1, [pc, #12]	@ (8001af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ae2:	5ccb      	ldrb	r3, [r1, r3]
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40021000 	.word	0x40021000
 8001af0:	08003c74 	.word	0x08003c74

08001af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001af8:	f7ff ffde 	bl	8001ab8 <HAL_RCC_GetHCLKFreq>
 8001afc:	4602      	mov	r2, r0
 8001afe:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	0adb      	lsrs	r3, r3, #11
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	4903      	ldr	r1, [pc, #12]	@ (8001b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b0a:	5ccb      	ldrb	r3, [r1, r3]
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40021000 	.word	0x40021000
 8001b18:	08003c74 	.word	0x08003c74

08001b1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b24:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <RCC_Delay+0x34>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0a      	ldr	r2, [pc, #40]	@ (8001b54 <RCC_Delay+0x38>)
 8001b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2e:	0a5b      	lsrs	r3, r3, #9
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	fb02 f303 	mul.w	r3, r2, r3
 8001b36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b38:	bf00      	nop
  }
  while (Delay --);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1e5a      	subs	r2, r3, #1
 8001b3e:	60fa      	str	r2, [r7, #12]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f9      	bne.n	8001b38 <RCC_Delay+0x1c>
}
 8001b44:	bf00      	nop
 8001b46:	bf00      	nop
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr
 8001b50:	20000000 	.word	0x20000000
 8001b54:	10624dd3 	.word	0x10624dd3

08001b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e041      	b.n	8001bee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d106      	bne.n	8001b84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7fe ff5a 	bl	8000a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2202      	movs	r2, #2
 8001b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3304      	adds	r3, #4
 8001b94:	4619      	mov	r1, r3
 8001b96:	4610      	mov	r0, r2
 8001b98:	f000 f966 	bl	8001e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d001      	beq.n	8001c10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e032      	b.n	8001c76 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2202      	movs	r2, #2
 8001c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a18      	ldr	r2, [pc, #96]	@ (8001c80 <HAL_TIM_Base_Start+0x88>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d00e      	beq.n	8001c40 <HAL_TIM_Base_Start+0x48>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c2a:	d009      	beq.n	8001c40 <HAL_TIM_Base_Start+0x48>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a14      	ldr	r2, [pc, #80]	@ (8001c84 <HAL_TIM_Base_Start+0x8c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d004      	beq.n	8001c40 <HAL_TIM_Base_Start+0x48>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a13      	ldr	r2, [pc, #76]	@ (8001c88 <HAL_TIM_Base_Start+0x90>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d111      	bne.n	8001c64 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b06      	cmp	r3, #6
 8001c50:	d010      	beq.n	8001c74 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f042 0201 	orr.w	r2, r2, #1
 8001c60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c62:	e007      	b.n	8001c74 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	40012c00 	.word	0x40012c00
 8001c84:	40000400 	.word	0x40000400
 8001c88:	40000800 	.word	0x40000800

08001c8c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6a1a      	ldr	r2, [r3, #32]
 8001c9a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10f      	bne.n	8001cc4 <HAL_TIM_Base_Stop+0x38>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6a1a      	ldr	r2, [r3, #32]
 8001caa:	f240 4344 	movw	r3, #1092	@ 0x444
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d107      	bne.n	8001cc4 <HAL_TIM_Base_Stop+0x38>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0201 	bic.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <HAL_TIM_ConfigClockSource+0x1c>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e0b4      	b.n	8001e5e <HAL_TIM_ConfigClockSource+0x186>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001d12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001d1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68ba      	ldr	r2, [r7, #8]
 8001d22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d2c:	d03e      	beq.n	8001dac <HAL_TIM_ConfigClockSource+0xd4>
 8001d2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d32:	f200 8087 	bhi.w	8001e44 <HAL_TIM_ConfigClockSource+0x16c>
 8001d36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d3a:	f000 8086 	beq.w	8001e4a <HAL_TIM_ConfigClockSource+0x172>
 8001d3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d42:	d87f      	bhi.n	8001e44 <HAL_TIM_ConfigClockSource+0x16c>
 8001d44:	2b70      	cmp	r3, #112	@ 0x70
 8001d46:	d01a      	beq.n	8001d7e <HAL_TIM_ConfigClockSource+0xa6>
 8001d48:	2b70      	cmp	r3, #112	@ 0x70
 8001d4a:	d87b      	bhi.n	8001e44 <HAL_TIM_ConfigClockSource+0x16c>
 8001d4c:	2b60      	cmp	r3, #96	@ 0x60
 8001d4e:	d050      	beq.n	8001df2 <HAL_TIM_ConfigClockSource+0x11a>
 8001d50:	2b60      	cmp	r3, #96	@ 0x60
 8001d52:	d877      	bhi.n	8001e44 <HAL_TIM_ConfigClockSource+0x16c>
 8001d54:	2b50      	cmp	r3, #80	@ 0x50
 8001d56:	d03c      	beq.n	8001dd2 <HAL_TIM_ConfigClockSource+0xfa>
 8001d58:	2b50      	cmp	r3, #80	@ 0x50
 8001d5a:	d873      	bhi.n	8001e44 <HAL_TIM_ConfigClockSource+0x16c>
 8001d5c:	2b40      	cmp	r3, #64	@ 0x40
 8001d5e:	d058      	beq.n	8001e12 <HAL_TIM_ConfigClockSource+0x13a>
 8001d60:	2b40      	cmp	r3, #64	@ 0x40
 8001d62:	d86f      	bhi.n	8001e44 <HAL_TIM_ConfigClockSource+0x16c>
 8001d64:	2b30      	cmp	r3, #48	@ 0x30
 8001d66:	d064      	beq.n	8001e32 <HAL_TIM_ConfigClockSource+0x15a>
 8001d68:	2b30      	cmp	r3, #48	@ 0x30
 8001d6a:	d86b      	bhi.n	8001e44 <HAL_TIM_ConfigClockSource+0x16c>
 8001d6c:	2b20      	cmp	r3, #32
 8001d6e:	d060      	beq.n	8001e32 <HAL_TIM_ConfigClockSource+0x15a>
 8001d70:	2b20      	cmp	r3, #32
 8001d72:	d867      	bhi.n	8001e44 <HAL_TIM_ConfigClockSource+0x16c>
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d05c      	beq.n	8001e32 <HAL_TIM_ConfigClockSource+0x15a>
 8001d78:	2b10      	cmp	r3, #16
 8001d7a:	d05a      	beq.n	8001e32 <HAL_TIM_ConfigClockSource+0x15a>
 8001d7c:	e062      	b.n	8001e44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d8e:	f000 f950 	bl	8002032 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001da0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	609a      	str	r2, [r3, #8]
      break;
 8001daa:	e04f      	b.n	8001e4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001dbc:	f000 f939 	bl	8002032 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001dce:	609a      	str	r2, [r3, #8]
      break;
 8001dd0:	e03c      	b.n	8001e4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dde:	461a      	mov	r2, r3
 8001de0:	f000 f8b0 	bl	8001f44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2150      	movs	r1, #80	@ 0x50
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 f907 	bl	8001ffe <TIM_ITRx_SetConfig>
      break;
 8001df0:	e02c      	b.n	8001e4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001dfe:	461a      	mov	r2, r3
 8001e00:	f000 f8ce 	bl	8001fa0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2160      	movs	r1, #96	@ 0x60
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 f8f7 	bl	8001ffe <TIM_ITRx_SetConfig>
      break;
 8001e10:	e01c      	b.n	8001e4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e1e:	461a      	mov	r2, r3
 8001e20:	f000 f890 	bl	8001f44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2140      	movs	r1, #64	@ 0x40
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 f8e7 	bl	8001ffe <TIM_ITRx_SetConfig>
      break;
 8001e30:	e00c      	b.n	8001e4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	f000 f8de 	bl	8001ffe <TIM_ITRx_SetConfig>
      break;
 8001e42:	e003      	b.n	8001e4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
      break;
 8001e48:	e000      	b.n	8001e4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001e4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a2f      	ldr	r2, [pc, #188]	@ (8001f38 <TIM_Base_SetConfig+0xd0>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d00b      	beq.n	8001e98 <TIM_Base_SetConfig+0x30>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e86:	d007      	beq.n	8001e98 <TIM_Base_SetConfig+0x30>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a2c      	ldr	r2, [pc, #176]	@ (8001f3c <TIM_Base_SetConfig+0xd4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d003      	beq.n	8001e98 <TIM_Base_SetConfig+0x30>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a2b      	ldr	r2, [pc, #172]	@ (8001f40 <TIM_Base_SetConfig+0xd8>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d108      	bne.n	8001eaa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a22      	ldr	r2, [pc, #136]	@ (8001f38 <TIM_Base_SetConfig+0xd0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d00b      	beq.n	8001eca <TIM_Base_SetConfig+0x62>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eb8:	d007      	beq.n	8001eca <TIM_Base_SetConfig+0x62>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8001f3c <TIM_Base_SetConfig+0xd4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d003      	beq.n	8001eca <TIM_Base_SetConfig+0x62>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a1e      	ldr	r2, [pc, #120]	@ (8001f40 <TIM_Base_SetConfig+0xd8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d108      	bne.n	8001edc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a0d      	ldr	r2, [pc, #52]	@ (8001f38 <TIM_Base_SetConfig+0xd0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d103      	bne.n	8001f10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d005      	beq.n	8001f2e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f023 0201 	bic.w	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	611a      	str	r2, [r3, #16]
  }
}
 8001f2e:	bf00      	nop
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	40012c00 	.word	0x40012c00
 8001f3c:	40000400 	.word	0x40000400
 8001f40:	40000800 	.word	0x40000800

08001f44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b087      	sub	sp, #28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	f023 0201 	bic.w	r2, r3, #1
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f023 030a 	bic.w	r3, r3, #10
 8001f80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	621a      	str	r2, [r3, #32]
}
 8001f96:	bf00      	nop
 8001f98:	371c      	adds	r7, #28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	f023 0210 	bic.w	r2, r3, #16
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	031b      	lsls	r3, r3, #12
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001fdc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	011b      	lsls	r3, r3, #4
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	621a      	str	r2, [r3, #32]
}
 8001ff4:	bf00      	nop
 8001ff6:	371c      	adds	r7, #28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr

08001ffe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b085      	sub	sp, #20
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002014:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4313      	orrs	r3, r2
 800201c:	f043 0307 	orr.w	r3, r3, #7
 8002020:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	609a      	str	r2, [r3, #8]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002032:	b480      	push	{r7}
 8002034:	b087      	sub	sp, #28
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
 800203e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800204c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	021a      	lsls	r2, r3, #8
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	431a      	orrs	r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	4313      	orrs	r3, r2
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4313      	orrs	r3, r2
 800205e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	609a      	str	r2, [r3, #8]
}
 8002066:	bf00      	nop
 8002068:	371c      	adds	r7, #28
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002084:	2302      	movs	r3, #2
 8002086:	e046      	b.n	8002116 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a16      	ldr	r2, [pc, #88]	@ (8002120 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d00e      	beq.n	80020ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020d4:	d009      	beq.n	80020ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a12      	ldr	r2, [pc, #72]	@ (8002124 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d004      	beq.n	80020ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a10      	ldr	r2, [pc, #64]	@ (8002128 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d10c      	bne.n	8002104 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr
 8002120:	40012c00 	.word	0x40012c00
 8002124:	40000400 	.word	0x40000400
 8002128:	40000800 	.word	0x40000800

0800212c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e042      	b.n	80021c4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d106      	bne.n	8002158 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7fe fc8e 	bl	8000a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2224      	movs	r2, #36	@ 0x24
 800215c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800216e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 fa09 	bl	8002588 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002184:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695a      	ldr	r2, [r3, #20]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002194:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2220      	movs	r2, #32
 80021b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	@ 0x28
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	4613      	mov	r3, r2
 80021da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	d175      	bne.n	80022d8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <HAL_UART_Transmit+0x2c>
 80021f2:	88fb      	ldrh	r3, [r7, #6]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e06e      	b.n	80022da <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2221      	movs	r2, #33	@ 0x21
 8002206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800220a:	f7fe fdcf 	bl	8000dac <HAL_GetTick>
 800220e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	88fa      	ldrh	r2, [r7, #6]
 8002214:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	88fa      	ldrh	r2, [r7, #6]
 800221a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002224:	d108      	bne.n	8002238 <HAL_UART_Transmit+0x6c>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d104      	bne.n	8002238 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	61bb      	str	r3, [r7, #24]
 8002236:	e003      	b.n	8002240 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800223c:	2300      	movs	r3, #0
 800223e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002240:	e02e      	b.n	80022a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2200      	movs	r2, #0
 800224a:	2180      	movs	r1, #128	@ 0x80
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 f8df 	bl	8002410 <UART_WaitOnFlagUntilTimeout>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2220      	movs	r2, #32
 800225c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e03a      	b.n	80022da <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10b      	bne.n	8002282 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002278:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	3302      	adds	r3, #2
 800227e:	61bb      	str	r3, [r7, #24]
 8002280:	e007      	b.n	8002292 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	781a      	ldrb	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	3301      	adds	r3, #1
 8002290:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002296:	b29b      	uxth	r3, r3
 8002298:	3b01      	subs	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1cb      	bne.n	8002242 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2200      	movs	r2, #0
 80022b2:	2140      	movs	r1, #64	@ 0x40
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 f8ab 	bl	8002410 <UART_WaitOnFlagUntilTimeout>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e006      	b.n	80022da <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	e000      	b.n	80022da <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80022d8:	2302      	movs	r3, #2
  }
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3720      	adds	r7, #32
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b08a      	sub	sp, #40	@ 0x28
 80022e6:	af02      	add	r7, sp, #8
 80022e8:	60f8      	str	r0, [r7, #12]
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	603b      	str	r3, [r7, #0]
 80022ee:	4613      	mov	r3, r2
 80022f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b20      	cmp	r3, #32
 8002300:	f040 8081 	bne.w	8002406 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <HAL_UART_Receive+0x2e>
 800230a:	88fb      	ldrh	r3, [r7, #6]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e079      	b.n	8002408 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2222      	movs	r2, #34	@ 0x22
 800231e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002328:	f7fe fd40 	bl	8000dac <HAL_GetTick>
 800232c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	88fa      	ldrh	r2, [r7, #6]
 8002332:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	88fa      	ldrh	r2, [r7, #6]
 8002338:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002342:	d108      	bne.n	8002356 <HAL_UART_Receive+0x74>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d104      	bne.n	8002356 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	61bb      	str	r3, [r7, #24]
 8002354:	e003      	b.n	800235e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800235a:	2300      	movs	r3, #0
 800235c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800235e:	e047      	b.n	80023f0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2200      	movs	r2, #0
 8002368:	2120      	movs	r1, #32
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 f850 	bl	8002410 <UART_WaitOnFlagUntilTimeout>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2220      	movs	r2, #32
 800237a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e042      	b.n	8002408 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10c      	bne.n	80023a2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	b29b      	uxth	r3, r3
 8002390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002394:	b29a      	uxth	r2, r3
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	3302      	adds	r3, #2
 800239e:	61bb      	str	r3, [r7, #24]
 80023a0:	e01f      	b.n	80023e2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023aa:	d007      	beq.n	80023bc <HAL_UART_Receive+0xda>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10a      	bne.n	80023ca <HAL_UART_Receive+0xe8>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d106      	bne.n	80023ca <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	e008      	b.n	80023dc <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	3301      	adds	r3, #1
 80023e0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	3b01      	subs	r3, #1
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1b2      	bne.n	8002360 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2220      	movs	r2, #32
 80023fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	e000      	b.n	8002408 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002406:	2302      	movs	r3, #2
  }
}
 8002408:	4618      	mov	r0, r3
 800240a:	3720      	adds	r7, #32
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	4613      	mov	r3, r2
 800241e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002420:	e03b      	b.n	800249a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002428:	d037      	beq.n	800249a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242a:	f7fe fcbf 	bl	8000dac <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	6a3a      	ldr	r2, [r7, #32]
 8002436:	429a      	cmp	r2, r3
 8002438:	d302      	bcc.n	8002440 <UART_WaitOnFlagUntilTimeout+0x30>
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e03a      	b.n	80024ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	2b00      	cmp	r3, #0
 8002450:	d023      	beq.n	800249a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2b80      	cmp	r3, #128	@ 0x80
 8002456:	d020      	beq.n	800249a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b40      	cmp	r3, #64	@ 0x40
 800245c:	d01d      	beq.n	800249a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b08      	cmp	r3, #8
 800246a:	d116      	bne.n	800249a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 f81d 	bl	80024c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2208      	movs	r2, #8
 800248c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e00f      	b.n	80024ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	4013      	ands	r3, r2
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	bf0c      	ite	eq
 80024aa:	2301      	moveq	r3, #1
 80024ac:	2300      	movne	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d0b4      	beq.n	8002422 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b095      	sub	sp, #84	@ 0x54
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	330c      	adds	r3, #12
 80024d0:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024d4:	e853 3f00 	ldrex	r3, [r3]
 80024d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80024da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80024e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	330c      	adds	r3, #12
 80024e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80024ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80024f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80024f2:	e841 2300 	strex	r3, r2, [r1]
 80024f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80024f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1e5      	bne.n	80024ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	3314      	adds	r3, #20
 8002504:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	e853 3f00 	ldrex	r3, [r3]
 800250c:	61fb      	str	r3, [r7, #28]
   return(result);
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f023 0301 	bic.w	r3, r3, #1
 8002514:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	3314      	adds	r3, #20
 800251c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800251e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002520:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002522:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002524:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002526:	e841 2300 	strex	r3, r2, [r1]
 800252a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800252c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1e5      	bne.n	80024fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	2b01      	cmp	r3, #1
 8002538:	d119      	bne.n	800256e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	330c      	adds	r3, #12
 8002540:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	e853 3f00 	ldrex	r3, [r3]
 8002548:	60bb      	str	r3, [r7, #8]
   return(result);
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	f023 0310 	bic.w	r3, r3, #16
 8002550:	647b      	str	r3, [r7, #68]	@ 0x44
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	330c      	adds	r3, #12
 8002558:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800255a:	61ba      	str	r2, [r7, #24]
 800255c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800255e:	6979      	ldr	r1, [r7, #20]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	e841 2300 	strex	r3, r2, [r1]
 8002566:	613b      	str	r3, [r7, #16]
   return(result);
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1e5      	bne.n	800253a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800257c:	bf00      	nop
 800257e:	3754      	adds	r7, #84	@ 0x54
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr
	...

08002588 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80025c2:	f023 030c 	bic.w	r3, r3, #12
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	68b9      	ldr	r1, [r7, #8]
 80025cc:	430b      	orrs	r3, r1
 80025ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699a      	ldr	r2, [r3, #24]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a2c      	ldr	r2, [pc, #176]	@ (800269c <UART_SetConfig+0x114>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d103      	bne.n	80025f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025f0:	f7ff fa80 	bl	8001af4 <HAL_RCC_GetPCLK2Freq>
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	e002      	b.n	80025fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025f8:	f7ff fa68 	bl	8001acc <HAL_RCC_GetPCLK1Freq>
 80025fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	009a      	lsls	r2, r3, #2
 8002608:	441a      	add	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	fbb2 f3f3 	udiv	r3, r2, r3
 8002614:	4a22      	ldr	r2, [pc, #136]	@ (80026a0 <UART_SetConfig+0x118>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	0119      	lsls	r1, r3, #4
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	009a      	lsls	r2, r3, #2
 8002628:	441a      	add	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	fbb2 f2f3 	udiv	r2, r2, r3
 8002634:	4b1a      	ldr	r3, [pc, #104]	@ (80026a0 <UART_SetConfig+0x118>)
 8002636:	fba3 0302 	umull	r0, r3, r3, r2
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	2064      	movs	r0, #100	@ 0x64
 800263e:	fb00 f303 	mul.w	r3, r0, r3
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	3332      	adds	r3, #50	@ 0x32
 8002648:	4a15      	ldr	r2, [pc, #84]	@ (80026a0 <UART_SetConfig+0x118>)
 800264a:	fba2 2303 	umull	r2, r3, r2, r3
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002654:	4419      	add	r1, r3
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	4613      	mov	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4413      	add	r3, r2
 800265e:	009a      	lsls	r2, r3, #2
 8002660:	441a      	add	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	fbb2 f2f3 	udiv	r2, r2, r3
 800266c:	4b0c      	ldr	r3, [pc, #48]	@ (80026a0 <UART_SetConfig+0x118>)
 800266e:	fba3 0302 	umull	r0, r3, r3, r2
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	2064      	movs	r0, #100	@ 0x64
 8002676:	fb00 f303 	mul.w	r3, r0, r3
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	3332      	adds	r3, #50	@ 0x32
 8002680:	4a07      	ldr	r2, [pc, #28]	@ (80026a0 <UART_SetConfig+0x118>)
 8002682:	fba2 2303 	umull	r2, r3, r2, r3
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	f003 020f 	and.w	r2, r3, #15
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	440a      	add	r2, r1
 8002692:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002694:	bf00      	nop
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40013800 	.word	0x40013800
 80026a0:	51eb851f 	.word	0x51eb851f

080026a4 <atoi>:
 80026a4:	220a      	movs	r2, #10
 80026a6:	2100      	movs	r1, #0
 80026a8:	f000 b938 	b.w	800291c <strtol>

080026ac <malloc>:
 80026ac:	4b02      	ldr	r3, [pc, #8]	@ (80026b8 <malloc+0xc>)
 80026ae:	4601      	mov	r1, r0
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	f000 b82d 	b.w	8002710 <_malloc_r>
 80026b6:	bf00      	nop
 80026b8:	20000018 	.word	0x20000018

080026bc <free>:
 80026bc:	4b02      	ldr	r3, [pc, #8]	@ (80026c8 <free+0xc>)
 80026be:	4601      	mov	r1, r0
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	f000 bc01 	b.w	8002ec8 <_free_r>
 80026c6:	bf00      	nop
 80026c8:	20000018 	.word	0x20000018

080026cc <sbrk_aligned>:
 80026cc:	b570      	push	{r4, r5, r6, lr}
 80026ce:	4e0f      	ldr	r6, [pc, #60]	@ (800270c <sbrk_aligned+0x40>)
 80026d0:	460c      	mov	r4, r1
 80026d2:	6831      	ldr	r1, [r6, #0]
 80026d4:	4605      	mov	r5, r0
 80026d6:	b911      	cbnz	r1, 80026de <sbrk_aligned+0x12>
 80026d8:	f000 fba6 	bl	8002e28 <_sbrk_r>
 80026dc:	6030      	str	r0, [r6, #0]
 80026de:	4621      	mov	r1, r4
 80026e0:	4628      	mov	r0, r5
 80026e2:	f000 fba1 	bl	8002e28 <_sbrk_r>
 80026e6:	1c43      	adds	r3, r0, #1
 80026e8:	d103      	bne.n	80026f2 <sbrk_aligned+0x26>
 80026ea:	f04f 34ff 	mov.w	r4, #4294967295
 80026ee:	4620      	mov	r0, r4
 80026f0:	bd70      	pop	{r4, r5, r6, pc}
 80026f2:	1cc4      	adds	r4, r0, #3
 80026f4:	f024 0403 	bic.w	r4, r4, #3
 80026f8:	42a0      	cmp	r0, r4
 80026fa:	d0f8      	beq.n	80026ee <sbrk_aligned+0x22>
 80026fc:	1a21      	subs	r1, r4, r0
 80026fe:	4628      	mov	r0, r5
 8002700:	f000 fb92 	bl	8002e28 <_sbrk_r>
 8002704:	3001      	adds	r0, #1
 8002706:	d1f2      	bne.n	80026ee <sbrk_aligned+0x22>
 8002708:	e7ef      	b.n	80026ea <sbrk_aligned+0x1e>
 800270a:	bf00      	nop
 800270c:	20000128 	.word	0x20000128

08002710 <_malloc_r>:
 8002710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002714:	1ccd      	adds	r5, r1, #3
 8002716:	f025 0503 	bic.w	r5, r5, #3
 800271a:	3508      	adds	r5, #8
 800271c:	2d0c      	cmp	r5, #12
 800271e:	bf38      	it	cc
 8002720:	250c      	movcc	r5, #12
 8002722:	2d00      	cmp	r5, #0
 8002724:	4606      	mov	r6, r0
 8002726:	db01      	blt.n	800272c <_malloc_r+0x1c>
 8002728:	42a9      	cmp	r1, r5
 800272a:	d904      	bls.n	8002736 <_malloc_r+0x26>
 800272c:	230c      	movs	r3, #12
 800272e:	6033      	str	r3, [r6, #0]
 8002730:	2000      	movs	r0, #0
 8002732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002736:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800280c <_malloc_r+0xfc>
 800273a:	f000 f869 	bl	8002810 <__malloc_lock>
 800273e:	f8d8 3000 	ldr.w	r3, [r8]
 8002742:	461c      	mov	r4, r3
 8002744:	bb44      	cbnz	r4, 8002798 <_malloc_r+0x88>
 8002746:	4629      	mov	r1, r5
 8002748:	4630      	mov	r0, r6
 800274a:	f7ff ffbf 	bl	80026cc <sbrk_aligned>
 800274e:	1c43      	adds	r3, r0, #1
 8002750:	4604      	mov	r4, r0
 8002752:	d158      	bne.n	8002806 <_malloc_r+0xf6>
 8002754:	f8d8 4000 	ldr.w	r4, [r8]
 8002758:	4627      	mov	r7, r4
 800275a:	2f00      	cmp	r7, #0
 800275c:	d143      	bne.n	80027e6 <_malloc_r+0xd6>
 800275e:	2c00      	cmp	r4, #0
 8002760:	d04b      	beq.n	80027fa <_malloc_r+0xea>
 8002762:	6823      	ldr	r3, [r4, #0]
 8002764:	4639      	mov	r1, r7
 8002766:	4630      	mov	r0, r6
 8002768:	eb04 0903 	add.w	r9, r4, r3
 800276c:	f000 fb5c 	bl	8002e28 <_sbrk_r>
 8002770:	4581      	cmp	r9, r0
 8002772:	d142      	bne.n	80027fa <_malloc_r+0xea>
 8002774:	6821      	ldr	r1, [r4, #0]
 8002776:	4630      	mov	r0, r6
 8002778:	1a6d      	subs	r5, r5, r1
 800277a:	4629      	mov	r1, r5
 800277c:	f7ff ffa6 	bl	80026cc <sbrk_aligned>
 8002780:	3001      	adds	r0, #1
 8002782:	d03a      	beq.n	80027fa <_malloc_r+0xea>
 8002784:	6823      	ldr	r3, [r4, #0]
 8002786:	442b      	add	r3, r5
 8002788:	6023      	str	r3, [r4, #0]
 800278a:	f8d8 3000 	ldr.w	r3, [r8]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	bb62      	cbnz	r2, 80027ec <_malloc_r+0xdc>
 8002792:	f8c8 7000 	str.w	r7, [r8]
 8002796:	e00f      	b.n	80027b8 <_malloc_r+0xa8>
 8002798:	6822      	ldr	r2, [r4, #0]
 800279a:	1b52      	subs	r2, r2, r5
 800279c:	d420      	bmi.n	80027e0 <_malloc_r+0xd0>
 800279e:	2a0b      	cmp	r2, #11
 80027a0:	d917      	bls.n	80027d2 <_malloc_r+0xc2>
 80027a2:	1961      	adds	r1, r4, r5
 80027a4:	42a3      	cmp	r3, r4
 80027a6:	6025      	str	r5, [r4, #0]
 80027a8:	bf18      	it	ne
 80027aa:	6059      	strne	r1, [r3, #4]
 80027ac:	6863      	ldr	r3, [r4, #4]
 80027ae:	bf08      	it	eq
 80027b0:	f8c8 1000 	streq.w	r1, [r8]
 80027b4:	5162      	str	r2, [r4, r5]
 80027b6:	604b      	str	r3, [r1, #4]
 80027b8:	4630      	mov	r0, r6
 80027ba:	f000 f82f 	bl	800281c <__malloc_unlock>
 80027be:	f104 000b 	add.w	r0, r4, #11
 80027c2:	1d23      	adds	r3, r4, #4
 80027c4:	f020 0007 	bic.w	r0, r0, #7
 80027c8:	1ac2      	subs	r2, r0, r3
 80027ca:	bf1c      	itt	ne
 80027cc:	1a1b      	subne	r3, r3, r0
 80027ce:	50a3      	strne	r3, [r4, r2]
 80027d0:	e7af      	b.n	8002732 <_malloc_r+0x22>
 80027d2:	6862      	ldr	r2, [r4, #4]
 80027d4:	42a3      	cmp	r3, r4
 80027d6:	bf0c      	ite	eq
 80027d8:	f8c8 2000 	streq.w	r2, [r8]
 80027dc:	605a      	strne	r2, [r3, #4]
 80027de:	e7eb      	b.n	80027b8 <_malloc_r+0xa8>
 80027e0:	4623      	mov	r3, r4
 80027e2:	6864      	ldr	r4, [r4, #4]
 80027e4:	e7ae      	b.n	8002744 <_malloc_r+0x34>
 80027e6:	463c      	mov	r4, r7
 80027e8:	687f      	ldr	r7, [r7, #4]
 80027ea:	e7b6      	b.n	800275a <_malloc_r+0x4a>
 80027ec:	461a      	mov	r2, r3
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	42a3      	cmp	r3, r4
 80027f2:	d1fb      	bne.n	80027ec <_malloc_r+0xdc>
 80027f4:	2300      	movs	r3, #0
 80027f6:	6053      	str	r3, [r2, #4]
 80027f8:	e7de      	b.n	80027b8 <_malloc_r+0xa8>
 80027fa:	230c      	movs	r3, #12
 80027fc:	4630      	mov	r0, r6
 80027fe:	6033      	str	r3, [r6, #0]
 8002800:	f000 f80c 	bl	800281c <__malloc_unlock>
 8002804:	e794      	b.n	8002730 <_malloc_r+0x20>
 8002806:	6005      	str	r5, [r0, #0]
 8002808:	e7d6      	b.n	80027b8 <_malloc_r+0xa8>
 800280a:	bf00      	nop
 800280c:	2000012c 	.word	0x2000012c

08002810 <__malloc_lock>:
 8002810:	4801      	ldr	r0, [pc, #4]	@ (8002818 <__malloc_lock+0x8>)
 8002812:	f000 bb56 	b.w	8002ec2 <__retarget_lock_acquire_recursive>
 8002816:	bf00      	nop
 8002818:	20000270 	.word	0x20000270

0800281c <__malloc_unlock>:
 800281c:	4801      	ldr	r0, [pc, #4]	@ (8002824 <__malloc_unlock+0x8>)
 800281e:	f000 bb51 	b.w	8002ec4 <__retarget_lock_release_recursive>
 8002822:	bf00      	nop
 8002824:	20000270 	.word	0x20000270

08002828 <_strtol_l.isra.0>:
 8002828:	2b24      	cmp	r3, #36	@ 0x24
 800282a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800282e:	4686      	mov	lr, r0
 8002830:	4690      	mov	r8, r2
 8002832:	d801      	bhi.n	8002838 <_strtol_l.isra.0+0x10>
 8002834:	2b01      	cmp	r3, #1
 8002836:	d106      	bne.n	8002846 <_strtol_l.isra.0+0x1e>
 8002838:	f000 fb18 	bl	8002e6c <__errno>
 800283c:	2316      	movs	r3, #22
 800283e:	6003      	str	r3, [r0, #0]
 8002840:	2000      	movs	r0, #0
 8002842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002846:	460d      	mov	r5, r1
 8002848:	4833      	ldr	r0, [pc, #204]	@ (8002918 <_strtol_l.isra.0+0xf0>)
 800284a:	462a      	mov	r2, r5
 800284c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002850:	5d06      	ldrb	r6, [r0, r4]
 8002852:	f016 0608 	ands.w	r6, r6, #8
 8002856:	d1f8      	bne.n	800284a <_strtol_l.isra.0+0x22>
 8002858:	2c2d      	cmp	r4, #45	@ 0x2d
 800285a:	d110      	bne.n	800287e <_strtol_l.isra.0+0x56>
 800285c:	2601      	movs	r6, #1
 800285e:	782c      	ldrb	r4, [r5, #0]
 8002860:	1c95      	adds	r5, r2, #2
 8002862:	f033 0210 	bics.w	r2, r3, #16
 8002866:	d115      	bne.n	8002894 <_strtol_l.isra.0+0x6c>
 8002868:	2c30      	cmp	r4, #48	@ 0x30
 800286a:	d10d      	bne.n	8002888 <_strtol_l.isra.0+0x60>
 800286c:	782a      	ldrb	r2, [r5, #0]
 800286e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8002872:	2a58      	cmp	r2, #88	@ 0x58
 8002874:	d108      	bne.n	8002888 <_strtol_l.isra.0+0x60>
 8002876:	786c      	ldrb	r4, [r5, #1]
 8002878:	3502      	adds	r5, #2
 800287a:	2310      	movs	r3, #16
 800287c:	e00a      	b.n	8002894 <_strtol_l.isra.0+0x6c>
 800287e:	2c2b      	cmp	r4, #43	@ 0x2b
 8002880:	bf04      	itt	eq
 8002882:	782c      	ldrbeq	r4, [r5, #0]
 8002884:	1c95      	addeq	r5, r2, #2
 8002886:	e7ec      	b.n	8002862 <_strtol_l.isra.0+0x3a>
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f6      	bne.n	800287a <_strtol_l.isra.0+0x52>
 800288c:	2c30      	cmp	r4, #48	@ 0x30
 800288e:	bf14      	ite	ne
 8002890:	230a      	movne	r3, #10
 8002892:	2308      	moveq	r3, #8
 8002894:	2200      	movs	r2, #0
 8002896:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800289a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800289e:	fbbc f9f3 	udiv	r9, ip, r3
 80028a2:	4610      	mov	r0, r2
 80028a4:	fb03 ca19 	mls	sl, r3, r9, ip
 80028a8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80028ac:	2f09      	cmp	r7, #9
 80028ae:	d80f      	bhi.n	80028d0 <_strtol_l.isra.0+0xa8>
 80028b0:	463c      	mov	r4, r7
 80028b2:	42a3      	cmp	r3, r4
 80028b4:	dd1b      	ble.n	80028ee <_strtol_l.isra.0+0xc6>
 80028b6:	1c57      	adds	r7, r2, #1
 80028b8:	d007      	beq.n	80028ca <_strtol_l.isra.0+0xa2>
 80028ba:	4581      	cmp	r9, r0
 80028bc:	d314      	bcc.n	80028e8 <_strtol_l.isra.0+0xc0>
 80028be:	d101      	bne.n	80028c4 <_strtol_l.isra.0+0x9c>
 80028c0:	45a2      	cmp	sl, r4
 80028c2:	db11      	blt.n	80028e8 <_strtol_l.isra.0+0xc0>
 80028c4:	2201      	movs	r2, #1
 80028c6:	fb00 4003 	mla	r0, r0, r3, r4
 80028ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80028ce:	e7eb      	b.n	80028a8 <_strtol_l.isra.0+0x80>
 80028d0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80028d4:	2f19      	cmp	r7, #25
 80028d6:	d801      	bhi.n	80028dc <_strtol_l.isra.0+0xb4>
 80028d8:	3c37      	subs	r4, #55	@ 0x37
 80028da:	e7ea      	b.n	80028b2 <_strtol_l.isra.0+0x8a>
 80028dc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80028e0:	2f19      	cmp	r7, #25
 80028e2:	d804      	bhi.n	80028ee <_strtol_l.isra.0+0xc6>
 80028e4:	3c57      	subs	r4, #87	@ 0x57
 80028e6:	e7e4      	b.n	80028b2 <_strtol_l.isra.0+0x8a>
 80028e8:	f04f 32ff 	mov.w	r2, #4294967295
 80028ec:	e7ed      	b.n	80028ca <_strtol_l.isra.0+0xa2>
 80028ee:	1c53      	adds	r3, r2, #1
 80028f0:	d108      	bne.n	8002904 <_strtol_l.isra.0+0xdc>
 80028f2:	2322      	movs	r3, #34	@ 0x22
 80028f4:	4660      	mov	r0, ip
 80028f6:	f8ce 3000 	str.w	r3, [lr]
 80028fa:	f1b8 0f00 	cmp.w	r8, #0
 80028fe:	d0a0      	beq.n	8002842 <_strtol_l.isra.0+0x1a>
 8002900:	1e69      	subs	r1, r5, #1
 8002902:	e006      	b.n	8002912 <_strtol_l.isra.0+0xea>
 8002904:	b106      	cbz	r6, 8002908 <_strtol_l.isra.0+0xe0>
 8002906:	4240      	negs	r0, r0
 8002908:	f1b8 0f00 	cmp.w	r8, #0
 800290c:	d099      	beq.n	8002842 <_strtol_l.isra.0+0x1a>
 800290e:	2a00      	cmp	r2, #0
 8002910:	d1f6      	bne.n	8002900 <_strtol_l.isra.0+0xd8>
 8002912:	f8c8 1000 	str.w	r1, [r8]
 8002916:	e794      	b.n	8002842 <_strtol_l.isra.0+0x1a>
 8002918:	08003c8f 	.word	0x08003c8f

0800291c <strtol>:
 800291c:	4613      	mov	r3, r2
 800291e:	460a      	mov	r2, r1
 8002920:	4601      	mov	r1, r0
 8002922:	4802      	ldr	r0, [pc, #8]	@ (800292c <strtol+0x10>)
 8002924:	6800      	ldr	r0, [r0, #0]
 8002926:	f7ff bf7f 	b.w	8002828 <_strtol_l.isra.0>
 800292a:	bf00      	nop
 800292c:	20000018 	.word	0x20000018

08002930 <std>:
 8002930:	2300      	movs	r3, #0
 8002932:	b510      	push	{r4, lr}
 8002934:	4604      	mov	r4, r0
 8002936:	e9c0 3300 	strd	r3, r3, [r0]
 800293a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800293e:	6083      	str	r3, [r0, #8]
 8002940:	8181      	strh	r1, [r0, #12]
 8002942:	6643      	str	r3, [r0, #100]	@ 0x64
 8002944:	81c2      	strh	r2, [r0, #14]
 8002946:	6183      	str	r3, [r0, #24]
 8002948:	4619      	mov	r1, r3
 800294a:	2208      	movs	r2, #8
 800294c:	305c      	adds	r0, #92	@ 0x5c
 800294e:	f000 fa2f 	bl	8002db0 <memset>
 8002952:	4b0d      	ldr	r3, [pc, #52]	@ (8002988 <std+0x58>)
 8002954:	6224      	str	r4, [r4, #32]
 8002956:	6263      	str	r3, [r4, #36]	@ 0x24
 8002958:	4b0c      	ldr	r3, [pc, #48]	@ (800298c <std+0x5c>)
 800295a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800295c:	4b0c      	ldr	r3, [pc, #48]	@ (8002990 <std+0x60>)
 800295e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002960:	4b0c      	ldr	r3, [pc, #48]	@ (8002994 <std+0x64>)
 8002962:	6323      	str	r3, [r4, #48]	@ 0x30
 8002964:	4b0c      	ldr	r3, [pc, #48]	@ (8002998 <std+0x68>)
 8002966:	429c      	cmp	r4, r3
 8002968:	d006      	beq.n	8002978 <std+0x48>
 800296a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800296e:	4294      	cmp	r4, r2
 8002970:	d002      	beq.n	8002978 <std+0x48>
 8002972:	33d0      	adds	r3, #208	@ 0xd0
 8002974:	429c      	cmp	r4, r3
 8002976:	d105      	bne.n	8002984 <std+0x54>
 8002978:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800297c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002980:	f000 ba9e 	b.w	8002ec0 <__retarget_lock_init_recursive>
 8002984:	bd10      	pop	{r4, pc}
 8002986:	bf00      	nop
 8002988:	08002c01 	.word	0x08002c01
 800298c:	08002c23 	.word	0x08002c23
 8002990:	08002c5b 	.word	0x08002c5b
 8002994:	08002c7f 	.word	0x08002c7f
 8002998:	20000130 	.word	0x20000130

0800299c <stdio_exit_handler>:
 800299c:	4a02      	ldr	r2, [pc, #8]	@ (80029a8 <stdio_exit_handler+0xc>)
 800299e:	4903      	ldr	r1, [pc, #12]	@ (80029ac <stdio_exit_handler+0x10>)
 80029a0:	4803      	ldr	r0, [pc, #12]	@ (80029b0 <stdio_exit_handler+0x14>)
 80029a2:	f000 b869 	b.w	8002a78 <_fwalk_sglue>
 80029a6:	bf00      	nop
 80029a8:	2000000c 	.word	0x2000000c
 80029ac:	080038a9 	.word	0x080038a9
 80029b0:	2000001c 	.word	0x2000001c

080029b4 <cleanup_stdio>:
 80029b4:	6841      	ldr	r1, [r0, #4]
 80029b6:	4b0c      	ldr	r3, [pc, #48]	@ (80029e8 <cleanup_stdio+0x34>)
 80029b8:	b510      	push	{r4, lr}
 80029ba:	4299      	cmp	r1, r3
 80029bc:	4604      	mov	r4, r0
 80029be:	d001      	beq.n	80029c4 <cleanup_stdio+0x10>
 80029c0:	f000 ff72 	bl	80038a8 <_fflush_r>
 80029c4:	68a1      	ldr	r1, [r4, #8]
 80029c6:	4b09      	ldr	r3, [pc, #36]	@ (80029ec <cleanup_stdio+0x38>)
 80029c8:	4299      	cmp	r1, r3
 80029ca:	d002      	beq.n	80029d2 <cleanup_stdio+0x1e>
 80029cc:	4620      	mov	r0, r4
 80029ce:	f000 ff6b 	bl	80038a8 <_fflush_r>
 80029d2:	68e1      	ldr	r1, [r4, #12]
 80029d4:	4b06      	ldr	r3, [pc, #24]	@ (80029f0 <cleanup_stdio+0x3c>)
 80029d6:	4299      	cmp	r1, r3
 80029d8:	d004      	beq.n	80029e4 <cleanup_stdio+0x30>
 80029da:	4620      	mov	r0, r4
 80029dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029e0:	f000 bf62 	b.w	80038a8 <_fflush_r>
 80029e4:	bd10      	pop	{r4, pc}
 80029e6:	bf00      	nop
 80029e8:	20000130 	.word	0x20000130
 80029ec:	20000198 	.word	0x20000198
 80029f0:	20000200 	.word	0x20000200

080029f4 <global_stdio_init.part.0>:
 80029f4:	b510      	push	{r4, lr}
 80029f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002a24 <global_stdio_init.part.0+0x30>)
 80029f8:	4c0b      	ldr	r4, [pc, #44]	@ (8002a28 <global_stdio_init.part.0+0x34>)
 80029fa:	4a0c      	ldr	r2, [pc, #48]	@ (8002a2c <global_stdio_init.part.0+0x38>)
 80029fc:	4620      	mov	r0, r4
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	2104      	movs	r1, #4
 8002a02:	2200      	movs	r2, #0
 8002a04:	f7ff ff94 	bl	8002930 <std>
 8002a08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	2109      	movs	r1, #9
 8002a10:	f7ff ff8e 	bl	8002930 <std>
 8002a14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002a18:	2202      	movs	r2, #2
 8002a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a1e:	2112      	movs	r1, #18
 8002a20:	f7ff bf86 	b.w	8002930 <std>
 8002a24:	20000268 	.word	0x20000268
 8002a28:	20000130 	.word	0x20000130
 8002a2c:	0800299d 	.word	0x0800299d

08002a30 <__sfp_lock_acquire>:
 8002a30:	4801      	ldr	r0, [pc, #4]	@ (8002a38 <__sfp_lock_acquire+0x8>)
 8002a32:	f000 ba46 	b.w	8002ec2 <__retarget_lock_acquire_recursive>
 8002a36:	bf00      	nop
 8002a38:	20000271 	.word	0x20000271

08002a3c <__sfp_lock_release>:
 8002a3c:	4801      	ldr	r0, [pc, #4]	@ (8002a44 <__sfp_lock_release+0x8>)
 8002a3e:	f000 ba41 	b.w	8002ec4 <__retarget_lock_release_recursive>
 8002a42:	bf00      	nop
 8002a44:	20000271 	.word	0x20000271

08002a48 <__sinit>:
 8002a48:	b510      	push	{r4, lr}
 8002a4a:	4604      	mov	r4, r0
 8002a4c:	f7ff fff0 	bl	8002a30 <__sfp_lock_acquire>
 8002a50:	6a23      	ldr	r3, [r4, #32]
 8002a52:	b11b      	cbz	r3, 8002a5c <__sinit+0x14>
 8002a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a58:	f7ff bff0 	b.w	8002a3c <__sfp_lock_release>
 8002a5c:	4b04      	ldr	r3, [pc, #16]	@ (8002a70 <__sinit+0x28>)
 8002a5e:	6223      	str	r3, [r4, #32]
 8002a60:	4b04      	ldr	r3, [pc, #16]	@ (8002a74 <__sinit+0x2c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1f5      	bne.n	8002a54 <__sinit+0xc>
 8002a68:	f7ff ffc4 	bl	80029f4 <global_stdio_init.part.0>
 8002a6c:	e7f2      	b.n	8002a54 <__sinit+0xc>
 8002a6e:	bf00      	nop
 8002a70:	080029b5 	.word	0x080029b5
 8002a74:	20000268 	.word	0x20000268

08002a78 <_fwalk_sglue>:
 8002a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a7c:	4607      	mov	r7, r0
 8002a7e:	4688      	mov	r8, r1
 8002a80:	4614      	mov	r4, r2
 8002a82:	2600      	movs	r6, #0
 8002a84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a88:	f1b9 0901 	subs.w	r9, r9, #1
 8002a8c:	d505      	bpl.n	8002a9a <_fwalk_sglue+0x22>
 8002a8e:	6824      	ldr	r4, [r4, #0]
 8002a90:	2c00      	cmp	r4, #0
 8002a92:	d1f7      	bne.n	8002a84 <_fwalk_sglue+0xc>
 8002a94:	4630      	mov	r0, r6
 8002a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a9a:	89ab      	ldrh	r3, [r5, #12]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d907      	bls.n	8002ab0 <_fwalk_sglue+0x38>
 8002aa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	d003      	beq.n	8002ab0 <_fwalk_sglue+0x38>
 8002aa8:	4629      	mov	r1, r5
 8002aaa:	4638      	mov	r0, r7
 8002aac:	47c0      	blx	r8
 8002aae:	4306      	orrs	r6, r0
 8002ab0:	3568      	adds	r5, #104	@ 0x68
 8002ab2:	e7e9      	b.n	8002a88 <_fwalk_sglue+0x10>

08002ab4 <iprintf>:
 8002ab4:	b40f      	push	{r0, r1, r2, r3}
 8002ab6:	b507      	push	{r0, r1, r2, lr}
 8002ab8:	4906      	ldr	r1, [pc, #24]	@ (8002ad4 <iprintf+0x20>)
 8002aba:	ab04      	add	r3, sp, #16
 8002abc:	6808      	ldr	r0, [r1, #0]
 8002abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ac2:	6881      	ldr	r1, [r0, #8]
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	f000 fbc7 	bl	8003258 <_vfiprintf_r>
 8002aca:	b003      	add	sp, #12
 8002acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ad0:	b004      	add	sp, #16
 8002ad2:	4770      	bx	lr
 8002ad4:	20000018 	.word	0x20000018

08002ad8 <_puts_r>:
 8002ad8:	6a03      	ldr	r3, [r0, #32]
 8002ada:	b570      	push	{r4, r5, r6, lr}
 8002adc:	4605      	mov	r5, r0
 8002ade:	460e      	mov	r6, r1
 8002ae0:	6884      	ldr	r4, [r0, #8]
 8002ae2:	b90b      	cbnz	r3, 8002ae8 <_puts_r+0x10>
 8002ae4:	f7ff ffb0 	bl	8002a48 <__sinit>
 8002ae8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002aea:	07db      	lsls	r3, r3, #31
 8002aec:	d405      	bmi.n	8002afa <_puts_r+0x22>
 8002aee:	89a3      	ldrh	r3, [r4, #12]
 8002af0:	0598      	lsls	r0, r3, #22
 8002af2:	d402      	bmi.n	8002afa <_puts_r+0x22>
 8002af4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002af6:	f000 f9e4 	bl	8002ec2 <__retarget_lock_acquire_recursive>
 8002afa:	89a3      	ldrh	r3, [r4, #12]
 8002afc:	0719      	lsls	r1, r3, #28
 8002afe:	d502      	bpl.n	8002b06 <_puts_r+0x2e>
 8002b00:	6923      	ldr	r3, [r4, #16]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d135      	bne.n	8002b72 <_puts_r+0x9a>
 8002b06:	4621      	mov	r1, r4
 8002b08:	4628      	mov	r0, r5
 8002b0a:	f000 f8fb 	bl	8002d04 <__swsetup_r>
 8002b0e:	b380      	cbz	r0, 8002b72 <_puts_r+0x9a>
 8002b10:	f04f 35ff 	mov.w	r5, #4294967295
 8002b14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002b16:	07da      	lsls	r2, r3, #31
 8002b18:	d405      	bmi.n	8002b26 <_puts_r+0x4e>
 8002b1a:	89a3      	ldrh	r3, [r4, #12]
 8002b1c:	059b      	lsls	r3, r3, #22
 8002b1e:	d402      	bmi.n	8002b26 <_puts_r+0x4e>
 8002b20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b22:	f000 f9cf 	bl	8002ec4 <__retarget_lock_release_recursive>
 8002b26:	4628      	mov	r0, r5
 8002b28:	bd70      	pop	{r4, r5, r6, pc}
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	da04      	bge.n	8002b38 <_puts_r+0x60>
 8002b2e:	69a2      	ldr	r2, [r4, #24]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	dc17      	bgt.n	8002b64 <_puts_r+0x8c>
 8002b34:	290a      	cmp	r1, #10
 8002b36:	d015      	beq.n	8002b64 <_puts_r+0x8c>
 8002b38:	6823      	ldr	r3, [r4, #0]
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	6022      	str	r2, [r4, #0]
 8002b3e:	7019      	strb	r1, [r3, #0]
 8002b40:	68a3      	ldr	r3, [r4, #8]
 8002b42:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002b46:	3b01      	subs	r3, #1
 8002b48:	60a3      	str	r3, [r4, #8]
 8002b4a:	2900      	cmp	r1, #0
 8002b4c:	d1ed      	bne.n	8002b2a <_puts_r+0x52>
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	da11      	bge.n	8002b76 <_puts_r+0x9e>
 8002b52:	4622      	mov	r2, r4
 8002b54:	210a      	movs	r1, #10
 8002b56:	4628      	mov	r0, r5
 8002b58:	f000 f895 	bl	8002c86 <__swbuf_r>
 8002b5c:	3001      	adds	r0, #1
 8002b5e:	d0d7      	beq.n	8002b10 <_puts_r+0x38>
 8002b60:	250a      	movs	r5, #10
 8002b62:	e7d7      	b.n	8002b14 <_puts_r+0x3c>
 8002b64:	4622      	mov	r2, r4
 8002b66:	4628      	mov	r0, r5
 8002b68:	f000 f88d 	bl	8002c86 <__swbuf_r>
 8002b6c:	3001      	adds	r0, #1
 8002b6e:	d1e7      	bne.n	8002b40 <_puts_r+0x68>
 8002b70:	e7ce      	b.n	8002b10 <_puts_r+0x38>
 8002b72:	3e01      	subs	r6, #1
 8002b74:	e7e4      	b.n	8002b40 <_puts_r+0x68>
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	6022      	str	r2, [r4, #0]
 8002b7c:	220a      	movs	r2, #10
 8002b7e:	701a      	strb	r2, [r3, #0]
 8002b80:	e7ee      	b.n	8002b60 <_puts_r+0x88>
	...

08002b84 <puts>:
 8002b84:	4b02      	ldr	r3, [pc, #8]	@ (8002b90 <puts+0xc>)
 8002b86:	4601      	mov	r1, r0
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	f7ff bfa5 	b.w	8002ad8 <_puts_r>
 8002b8e:	bf00      	nop
 8002b90:	20000018 	.word	0x20000018

08002b94 <sniprintf>:
 8002b94:	b40c      	push	{r2, r3}
 8002b96:	b530      	push	{r4, r5, lr}
 8002b98:	4b18      	ldr	r3, [pc, #96]	@ (8002bfc <sniprintf+0x68>)
 8002b9a:	1e0c      	subs	r4, r1, #0
 8002b9c:	681d      	ldr	r5, [r3, #0]
 8002b9e:	b09d      	sub	sp, #116	@ 0x74
 8002ba0:	da08      	bge.n	8002bb4 <sniprintf+0x20>
 8002ba2:	238b      	movs	r3, #139	@ 0x8b
 8002ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba8:	602b      	str	r3, [r5, #0]
 8002baa:	b01d      	add	sp, #116	@ 0x74
 8002bac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002bb0:	b002      	add	sp, #8
 8002bb2:	4770      	bx	lr
 8002bb4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002bb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8002bc2:	bf0c      	ite	eq
 8002bc4:	4623      	moveq	r3, r4
 8002bc6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002bca:	9304      	str	r3, [sp, #16]
 8002bcc:	9307      	str	r3, [sp, #28]
 8002bce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002bd2:	9002      	str	r0, [sp, #8]
 8002bd4:	9006      	str	r0, [sp, #24]
 8002bd6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002bda:	4628      	mov	r0, r5
 8002bdc:	ab21      	add	r3, sp, #132	@ 0x84
 8002bde:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002be0:	a902      	add	r1, sp, #8
 8002be2:	9301      	str	r3, [sp, #4]
 8002be4:	f000 fa14 	bl	8003010 <_svfiprintf_r>
 8002be8:	1c43      	adds	r3, r0, #1
 8002bea:	bfbc      	itt	lt
 8002bec:	238b      	movlt	r3, #139	@ 0x8b
 8002bee:	602b      	strlt	r3, [r5, #0]
 8002bf0:	2c00      	cmp	r4, #0
 8002bf2:	d0da      	beq.n	8002baa <sniprintf+0x16>
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	9b02      	ldr	r3, [sp, #8]
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	e7d6      	b.n	8002baa <sniprintf+0x16>
 8002bfc:	20000018 	.word	0x20000018

08002c00 <__sread>:
 8002c00:	b510      	push	{r4, lr}
 8002c02:	460c      	mov	r4, r1
 8002c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c08:	f000 f8fc 	bl	8002e04 <_read_r>
 8002c0c:	2800      	cmp	r0, #0
 8002c0e:	bfab      	itete	ge
 8002c10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002c12:	89a3      	ldrhlt	r3, [r4, #12]
 8002c14:	181b      	addge	r3, r3, r0
 8002c16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002c1a:	bfac      	ite	ge
 8002c1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002c1e:	81a3      	strhlt	r3, [r4, #12]
 8002c20:	bd10      	pop	{r4, pc}

08002c22 <__swrite>:
 8002c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c26:	461f      	mov	r7, r3
 8002c28:	898b      	ldrh	r3, [r1, #12]
 8002c2a:	4605      	mov	r5, r0
 8002c2c:	05db      	lsls	r3, r3, #23
 8002c2e:	460c      	mov	r4, r1
 8002c30:	4616      	mov	r6, r2
 8002c32:	d505      	bpl.n	8002c40 <__swrite+0x1e>
 8002c34:	2302      	movs	r3, #2
 8002c36:	2200      	movs	r2, #0
 8002c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c3c:	f000 f8d0 	bl	8002de0 <_lseek_r>
 8002c40:	89a3      	ldrh	r3, [r4, #12]
 8002c42:	4632      	mov	r2, r6
 8002c44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c48:	81a3      	strh	r3, [r4, #12]
 8002c4a:	4628      	mov	r0, r5
 8002c4c:	463b      	mov	r3, r7
 8002c4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c56:	f000 b8f7 	b.w	8002e48 <_write_r>

08002c5a <__sseek>:
 8002c5a:	b510      	push	{r4, lr}
 8002c5c:	460c      	mov	r4, r1
 8002c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c62:	f000 f8bd 	bl	8002de0 <_lseek_r>
 8002c66:	1c43      	adds	r3, r0, #1
 8002c68:	89a3      	ldrh	r3, [r4, #12]
 8002c6a:	bf15      	itete	ne
 8002c6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002c6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002c72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002c76:	81a3      	strheq	r3, [r4, #12]
 8002c78:	bf18      	it	ne
 8002c7a:	81a3      	strhne	r3, [r4, #12]
 8002c7c:	bd10      	pop	{r4, pc}

08002c7e <__sclose>:
 8002c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c82:	f000 b89d 	b.w	8002dc0 <_close_r>

08002c86 <__swbuf_r>:
 8002c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c88:	460e      	mov	r6, r1
 8002c8a:	4614      	mov	r4, r2
 8002c8c:	4605      	mov	r5, r0
 8002c8e:	b118      	cbz	r0, 8002c98 <__swbuf_r+0x12>
 8002c90:	6a03      	ldr	r3, [r0, #32]
 8002c92:	b90b      	cbnz	r3, 8002c98 <__swbuf_r+0x12>
 8002c94:	f7ff fed8 	bl	8002a48 <__sinit>
 8002c98:	69a3      	ldr	r3, [r4, #24]
 8002c9a:	60a3      	str	r3, [r4, #8]
 8002c9c:	89a3      	ldrh	r3, [r4, #12]
 8002c9e:	071a      	lsls	r2, r3, #28
 8002ca0:	d501      	bpl.n	8002ca6 <__swbuf_r+0x20>
 8002ca2:	6923      	ldr	r3, [r4, #16]
 8002ca4:	b943      	cbnz	r3, 8002cb8 <__swbuf_r+0x32>
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	4628      	mov	r0, r5
 8002caa:	f000 f82b 	bl	8002d04 <__swsetup_r>
 8002cae:	b118      	cbz	r0, 8002cb8 <__swbuf_r+0x32>
 8002cb0:	f04f 37ff 	mov.w	r7, #4294967295
 8002cb4:	4638      	mov	r0, r7
 8002cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cb8:	6823      	ldr	r3, [r4, #0]
 8002cba:	6922      	ldr	r2, [r4, #16]
 8002cbc:	b2f6      	uxtb	r6, r6
 8002cbe:	1a98      	subs	r0, r3, r2
 8002cc0:	6963      	ldr	r3, [r4, #20]
 8002cc2:	4637      	mov	r7, r6
 8002cc4:	4283      	cmp	r3, r0
 8002cc6:	dc05      	bgt.n	8002cd4 <__swbuf_r+0x4e>
 8002cc8:	4621      	mov	r1, r4
 8002cca:	4628      	mov	r0, r5
 8002ccc:	f000 fdec 	bl	80038a8 <_fflush_r>
 8002cd0:	2800      	cmp	r0, #0
 8002cd2:	d1ed      	bne.n	8002cb0 <__swbuf_r+0x2a>
 8002cd4:	68a3      	ldr	r3, [r4, #8]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	60a3      	str	r3, [r4, #8]
 8002cda:	6823      	ldr	r3, [r4, #0]
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	6022      	str	r2, [r4, #0]
 8002ce0:	701e      	strb	r6, [r3, #0]
 8002ce2:	6962      	ldr	r2, [r4, #20]
 8002ce4:	1c43      	adds	r3, r0, #1
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d004      	beq.n	8002cf4 <__swbuf_r+0x6e>
 8002cea:	89a3      	ldrh	r3, [r4, #12]
 8002cec:	07db      	lsls	r3, r3, #31
 8002cee:	d5e1      	bpl.n	8002cb4 <__swbuf_r+0x2e>
 8002cf0:	2e0a      	cmp	r6, #10
 8002cf2:	d1df      	bne.n	8002cb4 <__swbuf_r+0x2e>
 8002cf4:	4621      	mov	r1, r4
 8002cf6:	4628      	mov	r0, r5
 8002cf8:	f000 fdd6 	bl	80038a8 <_fflush_r>
 8002cfc:	2800      	cmp	r0, #0
 8002cfe:	d0d9      	beq.n	8002cb4 <__swbuf_r+0x2e>
 8002d00:	e7d6      	b.n	8002cb0 <__swbuf_r+0x2a>
	...

08002d04 <__swsetup_r>:
 8002d04:	b538      	push	{r3, r4, r5, lr}
 8002d06:	4b29      	ldr	r3, [pc, #164]	@ (8002dac <__swsetup_r+0xa8>)
 8002d08:	4605      	mov	r5, r0
 8002d0a:	6818      	ldr	r0, [r3, #0]
 8002d0c:	460c      	mov	r4, r1
 8002d0e:	b118      	cbz	r0, 8002d18 <__swsetup_r+0x14>
 8002d10:	6a03      	ldr	r3, [r0, #32]
 8002d12:	b90b      	cbnz	r3, 8002d18 <__swsetup_r+0x14>
 8002d14:	f7ff fe98 	bl	8002a48 <__sinit>
 8002d18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d1c:	0719      	lsls	r1, r3, #28
 8002d1e:	d422      	bmi.n	8002d66 <__swsetup_r+0x62>
 8002d20:	06da      	lsls	r2, r3, #27
 8002d22:	d407      	bmi.n	8002d34 <__swsetup_r+0x30>
 8002d24:	2209      	movs	r2, #9
 8002d26:	602a      	str	r2, [r5, #0]
 8002d28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d30:	81a3      	strh	r3, [r4, #12]
 8002d32:	e033      	b.n	8002d9c <__swsetup_r+0x98>
 8002d34:	0758      	lsls	r0, r3, #29
 8002d36:	d512      	bpl.n	8002d5e <__swsetup_r+0x5a>
 8002d38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002d3a:	b141      	cbz	r1, 8002d4e <__swsetup_r+0x4a>
 8002d3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002d40:	4299      	cmp	r1, r3
 8002d42:	d002      	beq.n	8002d4a <__swsetup_r+0x46>
 8002d44:	4628      	mov	r0, r5
 8002d46:	f000 f8bf 	bl	8002ec8 <_free_r>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8002d4e:	89a3      	ldrh	r3, [r4, #12]
 8002d50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002d54:	81a3      	strh	r3, [r4, #12]
 8002d56:	2300      	movs	r3, #0
 8002d58:	6063      	str	r3, [r4, #4]
 8002d5a:	6923      	ldr	r3, [r4, #16]
 8002d5c:	6023      	str	r3, [r4, #0]
 8002d5e:	89a3      	ldrh	r3, [r4, #12]
 8002d60:	f043 0308 	orr.w	r3, r3, #8
 8002d64:	81a3      	strh	r3, [r4, #12]
 8002d66:	6923      	ldr	r3, [r4, #16]
 8002d68:	b94b      	cbnz	r3, 8002d7e <__swsetup_r+0x7a>
 8002d6a:	89a3      	ldrh	r3, [r4, #12]
 8002d6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002d70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d74:	d003      	beq.n	8002d7e <__swsetup_r+0x7a>
 8002d76:	4621      	mov	r1, r4
 8002d78:	4628      	mov	r0, r5
 8002d7a:	f000 fde2 	bl	8003942 <__smakebuf_r>
 8002d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d82:	f013 0201 	ands.w	r2, r3, #1
 8002d86:	d00a      	beq.n	8002d9e <__swsetup_r+0x9a>
 8002d88:	2200      	movs	r2, #0
 8002d8a:	60a2      	str	r2, [r4, #8]
 8002d8c:	6962      	ldr	r2, [r4, #20]
 8002d8e:	4252      	negs	r2, r2
 8002d90:	61a2      	str	r2, [r4, #24]
 8002d92:	6922      	ldr	r2, [r4, #16]
 8002d94:	b942      	cbnz	r2, 8002da8 <__swsetup_r+0xa4>
 8002d96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002d9a:	d1c5      	bne.n	8002d28 <__swsetup_r+0x24>
 8002d9c:	bd38      	pop	{r3, r4, r5, pc}
 8002d9e:	0799      	lsls	r1, r3, #30
 8002da0:	bf58      	it	pl
 8002da2:	6962      	ldrpl	r2, [r4, #20]
 8002da4:	60a2      	str	r2, [r4, #8]
 8002da6:	e7f4      	b.n	8002d92 <__swsetup_r+0x8e>
 8002da8:	2000      	movs	r0, #0
 8002daa:	e7f7      	b.n	8002d9c <__swsetup_r+0x98>
 8002dac:	20000018 	.word	0x20000018

08002db0 <memset>:
 8002db0:	4603      	mov	r3, r0
 8002db2:	4402      	add	r2, r0
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d100      	bne.n	8002dba <memset+0xa>
 8002db8:	4770      	bx	lr
 8002dba:	f803 1b01 	strb.w	r1, [r3], #1
 8002dbe:	e7f9      	b.n	8002db4 <memset+0x4>

08002dc0 <_close_r>:
 8002dc0:	b538      	push	{r3, r4, r5, lr}
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	4d05      	ldr	r5, [pc, #20]	@ (8002ddc <_close_r+0x1c>)
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	4608      	mov	r0, r1
 8002dca:	602b      	str	r3, [r5, #0]
 8002dcc:	f7fd ff03 	bl	8000bd6 <_close>
 8002dd0:	1c43      	adds	r3, r0, #1
 8002dd2:	d102      	bne.n	8002dda <_close_r+0x1a>
 8002dd4:	682b      	ldr	r3, [r5, #0]
 8002dd6:	b103      	cbz	r3, 8002dda <_close_r+0x1a>
 8002dd8:	6023      	str	r3, [r4, #0]
 8002dda:	bd38      	pop	{r3, r4, r5, pc}
 8002ddc:	2000026c 	.word	0x2000026c

08002de0 <_lseek_r>:
 8002de0:	b538      	push	{r3, r4, r5, lr}
 8002de2:	4604      	mov	r4, r0
 8002de4:	4608      	mov	r0, r1
 8002de6:	4611      	mov	r1, r2
 8002de8:	2200      	movs	r2, #0
 8002dea:	4d05      	ldr	r5, [pc, #20]	@ (8002e00 <_lseek_r+0x20>)
 8002dec:	602a      	str	r2, [r5, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	f7fd ff15 	bl	8000c1e <_lseek>
 8002df4:	1c43      	adds	r3, r0, #1
 8002df6:	d102      	bne.n	8002dfe <_lseek_r+0x1e>
 8002df8:	682b      	ldr	r3, [r5, #0]
 8002dfa:	b103      	cbz	r3, 8002dfe <_lseek_r+0x1e>
 8002dfc:	6023      	str	r3, [r4, #0]
 8002dfe:	bd38      	pop	{r3, r4, r5, pc}
 8002e00:	2000026c 	.word	0x2000026c

08002e04 <_read_r>:
 8002e04:	b538      	push	{r3, r4, r5, lr}
 8002e06:	4604      	mov	r4, r0
 8002e08:	4608      	mov	r0, r1
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	4d05      	ldr	r5, [pc, #20]	@ (8002e24 <_read_r+0x20>)
 8002e10:	602a      	str	r2, [r5, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	f7fd fea6 	bl	8000b64 <_read>
 8002e18:	1c43      	adds	r3, r0, #1
 8002e1a:	d102      	bne.n	8002e22 <_read_r+0x1e>
 8002e1c:	682b      	ldr	r3, [r5, #0]
 8002e1e:	b103      	cbz	r3, 8002e22 <_read_r+0x1e>
 8002e20:	6023      	str	r3, [r4, #0]
 8002e22:	bd38      	pop	{r3, r4, r5, pc}
 8002e24:	2000026c 	.word	0x2000026c

08002e28 <_sbrk_r>:
 8002e28:	b538      	push	{r3, r4, r5, lr}
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	4d05      	ldr	r5, [pc, #20]	@ (8002e44 <_sbrk_r+0x1c>)
 8002e2e:	4604      	mov	r4, r0
 8002e30:	4608      	mov	r0, r1
 8002e32:	602b      	str	r3, [r5, #0]
 8002e34:	f7fd ff00 	bl	8000c38 <_sbrk>
 8002e38:	1c43      	adds	r3, r0, #1
 8002e3a:	d102      	bne.n	8002e42 <_sbrk_r+0x1a>
 8002e3c:	682b      	ldr	r3, [r5, #0]
 8002e3e:	b103      	cbz	r3, 8002e42 <_sbrk_r+0x1a>
 8002e40:	6023      	str	r3, [r4, #0]
 8002e42:	bd38      	pop	{r3, r4, r5, pc}
 8002e44:	2000026c 	.word	0x2000026c

08002e48 <_write_r>:
 8002e48:	b538      	push	{r3, r4, r5, lr}
 8002e4a:	4604      	mov	r4, r0
 8002e4c:	4608      	mov	r0, r1
 8002e4e:	4611      	mov	r1, r2
 8002e50:	2200      	movs	r2, #0
 8002e52:	4d05      	ldr	r5, [pc, #20]	@ (8002e68 <_write_r+0x20>)
 8002e54:	602a      	str	r2, [r5, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	f7fd fea1 	bl	8000b9e <_write>
 8002e5c:	1c43      	adds	r3, r0, #1
 8002e5e:	d102      	bne.n	8002e66 <_write_r+0x1e>
 8002e60:	682b      	ldr	r3, [r5, #0]
 8002e62:	b103      	cbz	r3, 8002e66 <_write_r+0x1e>
 8002e64:	6023      	str	r3, [r4, #0]
 8002e66:	bd38      	pop	{r3, r4, r5, pc}
 8002e68:	2000026c 	.word	0x2000026c

08002e6c <__errno>:
 8002e6c:	4b01      	ldr	r3, [pc, #4]	@ (8002e74 <__errno+0x8>)
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20000018 	.word	0x20000018

08002e78 <__libc_init_array>:
 8002e78:	b570      	push	{r4, r5, r6, lr}
 8002e7a:	2600      	movs	r6, #0
 8002e7c:	4d0c      	ldr	r5, [pc, #48]	@ (8002eb0 <__libc_init_array+0x38>)
 8002e7e:	4c0d      	ldr	r4, [pc, #52]	@ (8002eb4 <__libc_init_array+0x3c>)
 8002e80:	1b64      	subs	r4, r4, r5
 8002e82:	10a4      	asrs	r4, r4, #2
 8002e84:	42a6      	cmp	r6, r4
 8002e86:	d109      	bne.n	8002e9c <__libc_init_array+0x24>
 8002e88:	f000 fe26 	bl	8003ad8 <_init>
 8002e8c:	2600      	movs	r6, #0
 8002e8e:	4d0a      	ldr	r5, [pc, #40]	@ (8002eb8 <__libc_init_array+0x40>)
 8002e90:	4c0a      	ldr	r4, [pc, #40]	@ (8002ebc <__libc_init_array+0x44>)
 8002e92:	1b64      	subs	r4, r4, r5
 8002e94:	10a4      	asrs	r4, r4, #2
 8002e96:	42a6      	cmp	r6, r4
 8002e98:	d105      	bne.n	8002ea6 <__libc_init_array+0x2e>
 8002e9a:	bd70      	pop	{r4, r5, r6, pc}
 8002e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ea0:	4798      	blx	r3
 8002ea2:	3601      	adds	r6, #1
 8002ea4:	e7ee      	b.n	8002e84 <__libc_init_array+0xc>
 8002ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eaa:	4798      	blx	r3
 8002eac:	3601      	adds	r6, #1
 8002eae:	e7f2      	b.n	8002e96 <__libc_init_array+0x1e>
 8002eb0:	08003dcc 	.word	0x08003dcc
 8002eb4:	08003dcc 	.word	0x08003dcc
 8002eb8:	08003dcc 	.word	0x08003dcc
 8002ebc:	08003dd0 	.word	0x08003dd0

08002ec0 <__retarget_lock_init_recursive>:
 8002ec0:	4770      	bx	lr

08002ec2 <__retarget_lock_acquire_recursive>:
 8002ec2:	4770      	bx	lr

08002ec4 <__retarget_lock_release_recursive>:
 8002ec4:	4770      	bx	lr
	...

08002ec8 <_free_r>:
 8002ec8:	b538      	push	{r3, r4, r5, lr}
 8002eca:	4605      	mov	r5, r0
 8002ecc:	2900      	cmp	r1, #0
 8002ece:	d040      	beq.n	8002f52 <_free_r+0x8a>
 8002ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ed4:	1f0c      	subs	r4, r1, #4
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	bfb8      	it	lt
 8002eda:	18e4      	addlt	r4, r4, r3
 8002edc:	f7ff fc98 	bl	8002810 <__malloc_lock>
 8002ee0:	4a1c      	ldr	r2, [pc, #112]	@ (8002f54 <_free_r+0x8c>)
 8002ee2:	6813      	ldr	r3, [r2, #0]
 8002ee4:	b933      	cbnz	r3, 8002ef4 <_free_r+0x2c>
 8002ee6:	6063      	str	r3, [r4, #4]
 8002ee8:	6014      	str	r4, [r2, #0]
 8002eea:	4628      	mov	r0, r5
 8002eec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ef0:	f7ff bc94 	b.w	800281c <__malloc_unlock>
 8002ef4:	42a3      	cmp	r3, r4
 8002ef6:	d908      	bls.n	8002f0a <_free_r+0x42>
 8002ef8:	6820      	ldr	r0, [r4, #0]
 8002efa:	1821      	adds	r1, r4, r0
 8002efc:	428b      	cmp	r3, r1
 8002efe:	bf01      	itttt	eq
 8002f00:	6819      	ldreq	r1, [r3, #0]
 8002f02:	685b      	ldreq	r3, [r3, #4]
 8002f04:	1809      	addeq	r1, r1, r0
 8002f06:	6021      	streq	r1, [r4, #0]
 8002f08:	e7ed      	b.n	8002ee6 <_free_r+0x1e>
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	b10b      	cbz	r3, 8002f14 <_free_r+0x4c>
 8002f10:	42a3      	cmp	r3, r4
 8002f12:	d9fa      	bls.n	8002f0a <_free_r+0x42>
 8002f14:	6811      	ldr	r1, [r2, #0]
 8002f16:	1850      	adds	r0, r2, r1
 8002f18:	42a0      	cmp	r0, r4
 8002f1a:	d10b      	bne.n	8002f34 <_free_r+0x6c>
 8002f1c:	6820      	ldr	r0, [r4, #0]
 8002f1e:	4401      	add	r1, r0
 8002f20:	1850      	adds	r0, r2, r1
 8002f22:	4283      	cmp	r3, r0
 8002f24:	6011      	str	r1, [r2, #0]
 8002f26:	d1e0      	bne.n	8002eea <_free_r+0x22>
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4408      	add	r0, r1
 8002f2e:	6010      	str	r0, [r2, #0]
 8002f30:	6053      	str	r3, [r2, #4]
 8002f32:	e7da      	b.n	8002eea <_free_r+0x22>
 8002f34:	d902      	bls.n	8002f3c <_free_r+0x74>
 8002f36:	230c      	movs	r3, #12
 8002f38:	602b      	str	r3, [r5, #0]
 8002f3a:	e7d6      	b.n	8002eea <_free_r+0x22>
 8002f3c:	6820      	ldr	r0, [r4, #0]
 8002f3e:	1821      	adds	r1, r4, r0
 8002f40:	428b      	cmp	r3, r1
 8002f42:	bf01      	itttt	eq
 8002f44:	6819      	ldreq	r1, [r3, #0]
 8002f46:	685b      	ldreq	r3, [r3, #4]
 8002f48:	1809      	addeq	r1, r1, r0
 8002f4a:	6021      	streq	r1, [r4, #0]
 8002f4c:	6063      	str	r3, [r4, #4]
 8002f4e:	6054      	str	r4, [r2, #4]
 8002f50:	e7cb      	b.n	8002eea <_free_r+0x22>
 8002f52:	bd38      	pop	{r3, r4, r5, pc}
 8002f54:	2000012c 	.word	0x2000012c

08002f58 <__ssputs_r>:
 8002f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f5c:	461f      	mov	r7, r3
 8002f5e:	688e      	ldr	r6, [r1, #8]
 8002f60:	4682      	mov	sl, r0
 8002f62:	42be      	cmp	r6, r7
 8002f64:	460c      	mov	r4, r1
 8002f66:	4690      	mov	r8, r2
 8002f68:	680b      	ldr	r3, [r1, #0]
 8002f6a:	d82d      	bhi.n	8002fc8 <__ssputs_r+0x70>
 8002f6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002f70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002f74:	d026      	beq.n	8002fc4 <__ssputs_r+0x6c>
 8002f76:	6965      	ldr	r5, [r4, #20]
 8002f78:	6909      	ldr	r1, [r1, #16]
 8002f7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f7e:	eba3 0901 	sub.w	r9, r3, r1
 8002f82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f86:	1c7b      	adds	r3, r7, #1
 8002f88:	444b      	add	r3, r9
 8002f8a:	106d      	asrs	r5, r5, #1
 8002f8c:	429d      	cmp	r5, r3
 8002f8e:	bf38      	it	cc
 8002f90:	461d      	movcc	r5, r3
 8002f92:	0553      	lsls	r3, r2, #21
 8002f94:	d527      	bpl.n	8002fe6 <__ssputs_r+0x8e>
 8002f96:	4629      	mov	r1, r5
 8002f98:	f7ff fbba 	bl	8002710 <_malloc_r>
 8002f9c:	4606      	mov	r6, r0
 8002f9e:	b360      	cbz	r0, 8002ffa <__ssputs_r+0xa2>
 8002fa0:	464a      	mov	r2, r9
 8002fa2:	6921      	ldr	r1, [r4, #16]
 8002fa4:	f000 fd54 	bl	8003a50 <memcpy>
 8002fa8:	89a3      	ldrh	r3, [r4, #12]
 8002faa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fb2:	81a3      	strh	r3, [r4, #12]
 8002fb4:	6126      	str	r6, [r4, #16]
 8002fb6:	444e      	add	r6, r9
 8002fb8:	6026      	str	r6, [r4, #0]
 8002fba:	463e      	mov	r6, r7
 8002fbc:	6165      	str	r5, [r4, #20]
 8002fbe:	eba5 0509 	sub.w	r5, r5, r9
 8002fc2:	60a5      	str	r5, [r4, #8]
 8002fc4:	42be      	cmp	r6, r7
 8002fc6:	d900      	bls.n	8002fca <__ssputs_r+0x72>
 8002fc8:	463e      	mov	r6, r7
 8002fca:	4632      	mov	r2, r6
 8002fcc:	4641      	mov	r1, r8
 8002fce:	6820      	ldr	r0, [r4, #0]
 8002fd0:	f000 fcf3 	bl	80039ba <memmove>
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	68a3      	ldr	r3, [r4, #8]
 8002fd8:	1b9b      	subs	r3, r3, r6
 8002fda:	60a3      	str	r3, [r4, #8]
 8002fdc:	6823      	ldr	r3, [r4, #0]
 8002fde:	4433      	add	r3, r6
 8002fe0:	6023      	str	r3, [r4, #0]
 8002fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fe6:	462a      	mov	r2, r5
 8002fe8:	f000 fd40 	bl	8003a6c <_realloc_r>
 8002fec:	4606      	mov	r6, r0
 8002fee:	2800      	cmp	r0, #0
 8002ff0:	d1e0      	bne.n	8002fb4 <__ssputs_r+0x5c>
 8002ff2:	4650      	mov	r0, sl
 8002ff4:	6921      	ldr	r1, [r4, #16]
 8002ff6:	f7ff ff67 	bl	8002ec8 <_free_r>
 8002ffa:	230c      	movs	r3, #12
 8002ffc:	f8ca 3000 	str.w	r3, [sl]
 8003000:	89a3      	ldrh	r3, [r4, #12]
 8003002:	f04f 30ff 	mov.w	r0, #4294967295
 8003006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800300a:	81a3      	strh	r3, [r4, #12]
 800300c:	e7e9      	b.n	8002fe2 <__ssputs_r+0x8a>
	...

08003010 <_svfiprintf_r>:
 8003010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003014:	4698      	mov	r8, r3
 8003016:	898b      	ldrh	r3, [r1, #12]
 8003018:	4607      	mov	r7, r0
 800301a:	061b      	lsls	r3, r3, #24
 800301c:	460d      	mov	r5, r1
 800301e:	4614      	mov	r4, r2
 8003020:	b09d      	sub	sp, #116	@ 0x74
 8003022:	d510      	bpl.n	8003046 <_svfiprintf_r+0x36>
 8003024:	690b      	ldr	r3, [r1, #16]
 8003026:	b973      	cbnz	r3, 8003046 <_svfiprintf_r+0x36>
 8003028:	2140      	movs	r1, #64	@ 0x40
 800302a:	f7ff fb71 	bl	8002710 <_malloc_r>
 800302e:	6028      	str	r0, [r5, #0]
 8003030:	6128      	str	r0, [r5, #16]
 8003032:	b930      	cbnz	r0, 8003042 <_svfiprintf_r+0x32>
 8003034:	230c      	movs	r3, #12
 8003036:	603b      	str	r3, [r7, #0]
 8003038:	f04f 30ff 	mov.w	r0, #4294967295
 800303c:	b01d      	add	sp, #116	@ 0x74
 800303e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003042:	2340      	movs	r3, #64	@ 0x40
 8003044:	616b      	str	r3, [r5, #20]
 8003046:	2300      	movs	r3, #0
 8003048:	9309      	str	r3, [sp, #36]	@ 0x24
 800304a:	2320      	movs	r3, #32
 800304c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003050:	2330      	movs	r3, #48	@ 0x30
 8003052:	f04f 0901 	mov.w	r9, #1
 8003056:	f8cd 800c 	str.w	r8, [sp, #12]
 800305a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80031f4 <_svfiprintf_r+0x1e4>
 800305e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003062:	4623      	mov	r3, r4
 8003064:	469a      	mov	sl, r3
 8003066:	f813 2b01 	ldrb.w	r2, [r3], #1
 800306a:	b10a      	cbz	r2, 8003070 <_svfiprintf_r+0x60>
 800306c:	2a25      	cmp	r2, #37	@ 0x25
 800306e:	d1f9      	bne.n	8003064 <_svfiprintf_r+0x54>
 8003070:	ebba 0b04 	subs.w	fp, sl, r4
 8003074:	d00b      	beq.n	800308e <_svfiprintf_r+0x7e>
 8003076:	465b      	mov	r3, fp
 8003078:	4622      	mov	r2, r4
 800307a:	4629      	mov	r1, r5
 800307c:	4638      	mov	r0, r7
 800307e:	f7ff ff6b 	bl	8002f58 <__ssputs_r>
 8003082:	3001      	adds	r0, #1
 8003084:	f000 80a7 	beq.w	80031d6 <_svfiprintf_r+0x1c6>
 8003088:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800308a:	445a      	add	r2, fp
 800308c:	9209      	str	r2, [sp, #36]	@ 0x24
 800308e:	f89a 3000 	ldrb.w	r3, [sl]
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 809f 	beq.w	80031d6 <_svfiprintf_r+0x1c6>
 8003098:	2300      	movs	r3, #0
 800309a:	f04f 32ff 	mov.w	r2, #4294967295
 800309e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030a2:	f10a 0a01 	add.w	sl, sl, #1
 80030a6:	9304      	str	r3, [sp, #16]
 80030a8:	9307      	str	r3, [sp, #28]
 80030aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80030ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80030b0:	4654      	mov	r4, sl
 80030b2:	2205      	movs	r2, #5
 80030b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030b8:	484e      	ldr	r0, [pc, #312]	@ (80031f4 <_svfiprintf_r+0x1e4>)
 80030ba:	f000 fcbb 	bl	8003a34 <memchr>
 80030be:	9a04      	ldr	r2, [sp, #16]
 80030c0:	b9d8      	cbnz	r0, 80030fa <_svfiprintf_r+0xea>
 80030c2:	06d0      	lsls	r0, r2, #27
 80030c4:	bf44      	itt	mi
 80030c6:	2320      	movmi	r3, #32
 80030c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80030cc:	0711      	lsls	r1, r2, #28
 80030ce:	bf44      	itt	mi
 80030d0:	232b      	movmi	r3, #43	@ 0x2b
 80030d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80030d6:	f89a 3000 	ldrb.w	r3, [sl]
 80030da:	2b2a      	cmp	r3, #42	@ 0x2a
 80030dc:	d015      	beq.n	800310a <_svfiprintf_r+0xfa>
 80030de:	4654      	mov	r4, sl
 80030e0:	2000      	movs	r0, #0
 80030e2:	f04f 0c0a 	mov.w	ip, #10
 80030e6:	9a07      	ldr	r2, [sp, #28]
 80030e8:	4621      	mov	r1, r4
 80030ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030ee:	3b30      	subs	r3, #48	@ 0x30
 80030f0:	2b09      	cmp	r3, #9
 80030f2:	d94b      	bls.n	800318c <_svfiprintf_r+0x17c>
 80030f4:	b1b0      	cbz	r0, 8003124 <_svfiprintf_r+0x114>
 80030f6:	9207      	str	r2, [sp, #28]
 80030f8:	e014      	b.n	8003124 <_svfiprintf_r+0x114>
 80030fa:	eba0 0308 	sub.w	r3, r0, r8
 80030fe:	fa09 f303 	lsl.w	r3, r9, r3
 8003102:	4313      	orrs	r3, r2
 8003104:	46a2      	mov	sl, r4
 8003106:	9304      	str	r3, [sp, #16]
 8003108:	e7d2      	b.n	80030b0 <_svfiprintf_r+0xa0>
 800310a:	9b03      	ldr	r3, [sp, #12]
 800310c:	1d19      	adds	r1, r3, #4
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	9103      	str	r1, [sp, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	bfbb      	ittet	lt
 8003116:	425b      	neglt	r3, r3
 8003118:	f042 0202 	orrlt.w	r2, r2, #2
 800311c:	9307      	strge	r3, [sp, #28]
 800311e:	9307      	strlt	r3, [sp, #28]
 8003120:	bfb8      	it	lt
 8003122:	9204      	strlt	r2, [sp, #16]
 8003124:	7823      	ldrb	r3, [r4, #0]
 8003126:	2b2e      	cmp	r3, #46	@ 0x2e
 8003128:	d10a      	bne.n	8003140 <_svfiprintf_r+0x130>
 800312a:	7863      	ldrb	r3, [r4, #1]
 800312c:	2b2a      	cmp	r3, #42	@ 0x2a
 800312e:	d132      	bne.n	8003196 <_svfiprintf_r+0x186>
 8003130:	9b03      	ldr	r3, [sp, #12]
 8003132:	3402      	adds	r4, #2
 8003134:	1d1a      	adds	r2, r3, #4
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	9203      	str	r2, [sp, #12]
 800313a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800313e:	9305      	str	r3, [sp, #20]
 8003140:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80031f8 <_svfiprintf_r+0x1e8>
 8003144:	2203      	movs	r2, #3
 8003146:	4650      	mov	r0, sl
 8003148:	7821      	ldrb	r1, [r4, #0]
 800314a:	f000 fc73 	bl	8003a34 <memchr>
 800314e:	b138      	cbz	r0, 8003160 <_svfiprintf_r+0x150>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	9b04      	ldr	r3, [sp, #16]
 8003154:	eba0 000a 	sub.w	r0, r0, sl
 8003158:	4082      	lsls	r2, r0
 800315a:	4313      	orrs	r3, r2
 800315c:	3401      	adds	r4, #1
 800315e:	9304      	str	r3, [sp, #16]
 8003160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003164:	2206      	movs	r2, #6
 8003166:	4825      	ldr	r0, [pc, #148]	@ (80031fc <_svfiprintf_r+0x1ec>)
 8003168:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800316c:	f000 fc62 	bl	8003a34 <memchr>
 8003170:	2800      	cmp	r0, #0
 8003172:	d036      	beq.n	80031e2 <_svfiprintf_r+0x1d2>
 8003174:	4b22      	ldr	r3, [pc, #136]	@ (8003200 <_svfiprintf_r+0x1f0>)
 8003176:	bb1b      	cbnz	r3, 80031c0 <_svfiprintf_r+0x1b0>
 8003178:	9b03      	ldr	r3, [sp, #12]
 800317a:	3307      	adds	r3, #7
 800317c:	f023 0307 	bic.w	r3, r3, #7
 8003180:	3308      	adds	r3, #8
 8003182:	9303      	str	r3, [sp, #12]
 8003184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003186:	4433      	add	r3, r6
 8003188:	9309      	str	r3, [sp, #36]	@ 0x24
 800318a:	e76a      	b.n	8003062 <_svfiprintf_r+0x52>
 800318c:	460c      	mov	r4, r1
 800318e:	2001      	movs	r0, #1
 8003190:	fb0c 3202 	mla	r2, ip, r2, r3
 8003194:	e7a8      	b.n	80030e8 <_svfiprintf_r+0xd8>
 8003196:	2300      	movs	r3, #0
 8003198:	f04f 0c0a 	mov.w	ip, #10
 800319c:	4619      	mov	r1, r3
 800319e:	3401      	adds	r4, #1
 80031a0:	9305      	str	r3, [sp, #20]
 80031a2:	4620      	mov	r0, r4
 80031a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031a8:	3a30      	subs	r2, #48	@ 0x30
 80031aa:	2a09      	cmp	r2, #9
 80031ac:	d903      	bls.n	80031b6 <_svfiprintf_r+0x1a6>
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0c6      	beq.n	8003140 <_svfiprintf_r+0x130>
 80031b2:	9105      	str	r1, [sp, #20]
 80031b4:	e7c4      	b.n	8003140 <_svfiprintf_r+0x130>
 80031b6:	4604      	mov	r4, r0
 80031b8:	2301      	movs	r3, #1
 80031ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80031be:	e7f0      	b.n	80031a2 <_svfiprintf_r+0x192>
 80031c0:	ab03      	add	r3, sp, #12
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	462a      	mov	r2, r5
 80031c6:	4638      	mov	r0, r7
 80031c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003204 <_svfiprintf_r+0x1f4>)
 80031ca:	a904      	add	r1, sp, #16
 80031cc:	f3af 8000 	nop.w
 80031d0:	1c42      	adds	r2, r0, #1
 80031d2:	4606      	mov	r6, r0
 80031d4:	d1d6      	bne.n	8003184 <_svfiprintf_r+0x174>
 80031d6:	89ab      	ldrh	r3, [r5, #12]
 80031d8:	065b      	lsls	r3, r3, #25
 80031da:	f53f af2d 	bmi.w	8003038 <_svfiprintf_r+0x28>
 80031de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80031e0:	e72c      	b.n	800303c <_svfiprintf_r+0x2c>
 80031e2:	ab03      	add	r3, sp, #12
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	462a      	mov	r2, r5
 80031e8:	4638      	mov	r0, r7
 80031ea:	4b06      	ldr	r3, [pc, #24]	@ (8003204 <_svfiprintf_r+0x1f4>)
 80031ec:	a904      	add	r1, sp, #16
 80031ee:	f000 f9bd 	bl	800356c <_printf_i>
 80031f2:	e7ed      	b.n	80031d0 <_svfiprintf_r+0x1c0>
 80031f4:	08003d8f 	.word	0x08003d8f
 80031f8:	08003d95 	.word	0x08003d95
 80031fc:	08003d99 	.word	0x08003d99
 8003200:	00000000 	.word	0x00000000
 8003204:	08002f59 	.word	0x08002f59

08003208 <__sfputc_r>:
 8003208:	6893      	ldr	r3, [r2, #8]
 800320a:	b410      	push	{r4}
 800320c:	3b01      	subs	r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	6093      	str	r3, [r2, #8]
 8003212:	da07      	bge.n	8003224 <__sfputc_r+0x1c>
 8003214:	6994      	ldr	r4, [r2, #24]
 8003216:	42a3      	cmp	r3, r4
 8003218:	db01      	blt.n	800321e <__sfputc_r+0x16>
 800321a:	290a      	cmp	r1, #10
 800321c:	d102      	bne.n	8003224 <__sfputc_r+0x1c>
 800321e:	bc10      	pop	{r4}
 8003220:	f7ff bd31 	b.w	8002c86 <__swbuf_r>
 8003224:	6813      	ldr	r3, [r2, #0]
 8003226:	1c58      	adds	r0, r3, #1
 8003228:	6010      	str	r0, [r2, #0]
 800322a:	7019      	strb	r1, [r3, #0]
 800322c:	4608      	mov	r0, r1
 800322e:	bc10      	pop	{r4}
 8003230:	4770      	bx	lr

08003232 <__sfputs_r>:
 8003232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003234:	4606      	mov	r6, r0
 8003236:	460f      	mov	r7, r1
 8003238:	4614      	mov	r4, r2
 800323a:	18d5      	adds	r5, r2, r3
 800323c:	42ac      	cmp	r4, r5
 800323e:	d101      	bne.n	8003244 <__sfputs_r+0x12>
 8003240:	2000      	movs	r0, #0
 8003242:	e007      	b.n	8003254 <__sfputs_r+0x22>
 8003244:	463a      	mov	r2, r7
 8003246:	4630      	mov	r0, r6
 8003248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800324c:	f7ff ffdc 	bl	8003208 <__sfputc_r>
 8003250:	1c43      	adds	r3, r0, #1
 8003252:	d1f3      	bne.n	800323c <__sfputs_r+0xa>
 8003254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003258 <_vfiprintf_r>:
 8003258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800325c:	460d      	mov	r5, r1
 800325e:	4614      	mov	r4, r2
 8003260:	4698      	mov	r8, r3
 8003262:	4606      	mov	r6, r0
 8003264:	b09d      	sub	sp, #116	@ 0x74
 8003266:	b118      	cbz	r0, 8003270 <_vfiprintf_r+0x18>
 8003268:	6a03      	ldr	r3, [r0, #32]
 800326a:	b90b      	cbnz	r3, 8003270 <_vfiprintf_r+0x18>
 800326c:	f7ff fbec 	bl	8002a48 <__sinit>
 8003270:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003272:	07d9      	lsls	r1, r3, #31
 8003274:	d405      	bmi.n	8003282 <_vfiprintf_r+0x2a>
 8003276:	89ab      	ldrh	r3, [r5, #12]
 8003278:	059a      	lsls	r2, r3, #22
 800327a:	d402      	bmi.n	8003282 <_vfiprintf_r+0x2a>
 800327c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800327e:	f7ff fe20 	bl	8002ec2 <__retarget_lock_acquire_recursive>
 8003282:	89ab      	ldrh	r3, [r5, #12]
 8003284:	071b      	lsls	r3, r3, #28
 8003286:	d501      	bpl.n	800328c <_vfiprintf_r+0x34>
 8003288:	692b      	ldr	r3, [r5, #16]
 800328a:	b99b      	cbnz	r3, 80032b4 <_vfiprintf_r+0x5c>
 800328c:	4629      	mov	r1, r5
 800328e:	4630      	mov	r0, r6
 8003290:	f7ff fd38 	bl	8002d04 <__swsetup_r>
 8003294:	b170      	cbz	r0, 80032b4 <_vfiprintf_r+0x5c>
 8003296:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003298:	07dc      	lsls	r4, r3, #31
 800329a:	d504      	bpl.n	80032a6 <_vfiprintf_r+0x4e>
 800329c:	f04f 30ff 	mov.w	r0, #4294967295
 80032a0:	b01d      	add	sp, #116	@ 0x74
 80032a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032a6:	89ab      	ldrh	r3, [r5, #12]
 80032a8:	0598      	lsls	r0, r3, #22
 80032aa:	d4f7      	bmi.n	800329c <_vfiprintf_r+0x44>
 80032ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80032ae:	f7ff fe09 	bl	8002ec4 <__retarget_lock_release_recursive>
 80032b2:	e7f3      	b.n	800329c <_vfiprintf_r+0x44>
 80032b4:	2300      	movs	r3, #0
 80032b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80032b8:	2320      	movs	r3, #32
 80032ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80032be:	2330      	movs	r3, #48	@ 0x30
 80032c0:	f04f 0901 	mov.w	r9, #1
 80032c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80032c8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003474 <_vfiprintf_r+0x21c>
 80032cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80032d0:	4623      	mov	r3, r4
 80032d2:	469a      	mov	sl, r3
 80032d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032d8:	b10a      	cbz	r2, 80032de <_vfiprintf_r+0x86>
 80032da:	2a25      	cmp	r2, #37	@ 0x25
 80032dc:	d1f9      	bne.n	80032d2 <_vfiprintf_r+0x7a>
 80032de:	ebba 0b04 	subs.w	fp, sl, r4
 80032e2:	d00b      	beq.n	80032fc <_vfiprintf_r+0xa4>
 80032e4:	465b      	mov	r3, fp
 80032e6:	4622      	mov	r2, r4
 80032e8:	4629      	mov	r1, r5
 80032ea:	4630      	mov	r0, r6
 80032ec:	f7ff ffa1 	bl	8003232 <__sfputs_r>
 80032f0:	3001      	adds	r0, #1
 80032f2:	f000 80a7 	beq.w	8003444 <_vfiprintf_r+0x1ec>
 80032f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80032f8:	445a      	add	r2, fp
 80032fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80032fc:	f89a 3000 	ldrb.w	r3, [sl]
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 809f 	beq.w	8003444 <_vfiprintf_r+0x1ec>
 8003306:	2300      	movs	r3, #0
 8003308:	f04f 32ff 	mov.w	r2, #4294967295
 800330c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003310:	f10a 0a01 	add.w	sl, sl, #1
 8003314:	9304      	str	r3, [sp, #16]
 8003316:	9307      	str	r3, [sp, #28]
 8003318:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800331c:	931a      	str	r3, [sp, #104]	@ 0x68
 800331e:	4654      	mov	r4, sl
 8003320:	2205      	movs	r2, #5
 8003322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003326:	4853      	ldr	r0, [pc, #332]	@ (8003474 <_vfiprintf_r+0x21c>)
 8003328:	f000 fb84 	bl	8003a34 <memchr>
 800332c:	9a04      	ldr	r2, [sp, #16]
 800332e:	b9d8      	cbnz	r0, 8003368 <_vfiprintf_r+0x110>
 8003330:	06d1      	lsls	r1, r2, #27
 8003332:	bf44      	itt	mi
 8003334:	2320      	movmi	r3, #32
 8003336:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800333a:	0713      	lsls	r3, r2, #28
 800333c:	bf44      	itt	mi
 800333e:	232b      	movmi	r3, #43	@ 0x2b
 8003340:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003344:	f89a 3000 	ldrb.w	r3, [sl]
 8003348:	2b2a      	cmp	r3, #42	@ 0x2a
 800334a:	d015      	beq.n	8003378 <_vfiprintf_r+0x120>
 800334c:	4654      	mov	r4, sl
 800334e:	2000      	movs	r0, #0
 8003350:	f04f 0c0a 	mov.w	ip, #10
 8003354:	9a07      	ldr	r2, [sp, #28]
 8003356:	4621      	mov	r1, r4
 8003358:	f811 3b01 	ldrb.w	r3, [r1], #1
 800335c:	3b30      	subs	r3, #48	@ 0x30
 800335e:	2b09      	cmp	r3, #9
 8003360:	d94b      	bls.n	80033fa <_vfiprintf_r+0x1a2>
 8003362:	b1b0      	cbz	r0, 8003392 <_vfiprintf_r+0x13a>
 8003364:	9207      	str	r2, [sp, #28]
 8003366:	e014      	b.n	8003392 <_vfiprintf_r+0x13a>
 8003368:	eba0 0308 	sub.w	r3, r0, r8
 800336c:	fa09 f303 	lsl.w	r3, r9, r3
 8003370:	4313      	orrs	r3, r2
 8003372:	46a2      	mov	sl, r4
 8003374:	9304      	str	r3, [sp, #16]
 8003376:	e7d2      	b.n	800331e <_vfiprintf_r+0xc6>
 8003378:	9b03      	ldr	r3, [sp, #12]
 800337a:	1d19      	adds	r1, r3, #4
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	9103      	str	r1, [sp, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	bfbb      	ittet	lt
 8003384:	425b      	neglt	r3, r3
 8003386:	f042 0202 	orrlt.w	r2, r2, #2
 800338a:	9307      	strge	r3, [sp, #28]
 800338c:	9307      	strlt	r3, [sp, #28]
 800338e:	bfb8      	it	lt
 8003390:	9204      	strlt	r2, [sp, #16]
 8003392:	7823      	ldrb	r3, [r4, #0]
 8003394:	2b2e      	cmp	r3, #46	@ 0x2e
 8003396:	d10a      	bne.n	80033ae <_vfiprintf_r+0x156>
 8003398:	7863      	ldrb	r3, [r4, #1]
 800339a:	2b2a      	cmp	r3, #42	@ 0x2a
 800339c:	d132      	bne.n	8003404 <_vfiprintf_r+0x1ac>
 800339e:	9b03      	ldr	r3, [sp, #12]
 80033a0:	3402      	adds	r4, #2
 80033a2:	1d1a      	adds	r2, r3, #4
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	9203      	str	r2, [sp, #12]
 80033a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80033ac:	9305      	str	r3, [sp, #20]
 80033ae:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003478 <_vfiprintf_r+0x220>
 80033b2:	2203      	movs	r2, #3
 80033b4:	4650      	mov	r0, sl
 80033b6:	7821      	ldrb	r1, [r4, #0]
 80033b8:	f000 fb3c 	bl	8003a34 <memchr>
 80033bc:	b138      	cbz	r0, 80033ce <_vfiprintf_r+0x176>
 80033be:	2240      	movs	r2, #64	@ 0x40
 80033c0:	9b04      	ldr	r3, [sp, #16]
 80033c2:	eba0 000a 	sub.w	r0, r0, sl
 80033c6:	4082      	lsls	r2, r0
 80033c8:	4313      	orrs	r3, r2
 80033ca:	3401      	adds	r4, #1
 80033cc:	9304      	str	r3, [sp, #16]
 80033ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033d2:	2206      	movs	r2, #6
 80033d4:	4829      	ldr	r0, [pc, #164]	@ (800347c <_vfiprintf_r+0x224>)
 80033d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80033da:	f000 fb2b 	bl	8003a34 <memchr>
 80033de:	2800      	cmp	r0, #0
 80033e0:	d03f      	beq.n	8003462 <_vfiprintf_r+0x20a>
 80033e2:	4b27      	ldr	r3, [pc, #156]	@ (8003480 <_vfiprintf_r+0x228>)
 80033e4:	bb1b      	cbnz	r3, 800342e <_vfiprintf_r+0x1d6>
 80033e6:	9b03      	ldr	r3, [sp, #12]
 80033e8:	3307      	adds	r3, #7
 80033ea:	f023 0307 	bic.w	r3, r3, #7
 80033ee:	3308      	adds	r3, #8
 80033f0:	9303      	str	r3, [sp, #12]
 80033f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033f4:	443b      	add	r3, r7
 80033f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80033f8:	e76a      	b.n	80032d0 <_vfiprintf_r+0x78>
 80033fa:	460c      	mov	r4, r1
 80033fc:	2001      	movs	r0, #1
 80033fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8003402:	e7a8      	b.n	8003356 <_vfiprintf_r+0xfe>
 8003404:	2300      	movs	r3, #0
 8003406:	f04f 0c0a 	mov.w	ip, #10
 800340a:	4619      	mov	r1, r3
 800340c:	3401      	adds	r4, #1
 800340e:	9305      	str	r3, [sp, #20]
 8003410:	4620      	mov	r0, r4
 8003412:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003416:	3a30      	subs	r2, #48	@ 0x30
 8003418:	2a09      	cmp	r2, #9
 800341a:	d903      	bls.n	8003424 <_vfiprintf_r+0x1cc>
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0c6      	beq.n	80033ae <_vfiprintf_r+0x156>
 8003420:	9105      	str	r1, [sp, #20]
 8003422:	e7c4      	b.n	80033ae <_vfiprintf_r+0x156>
 8003424:	4604      	mov	r4, r0
 8003426:	2301      	movs	r3, #1
 8003428:	fb0c 2101 	mla	r1, ip, r1, r2
 800342c:	e7f0      	b.n	8003410 <_vfiprintf_r+0x1b8>
 800342e:	ab03      	add	r3, sp, #12
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	462a      	mov	r2, r5
 8003434:	4630      	mov	r0, r6
 8003436:	4b13      	ldr	r3, [pc, #76]	@ (8003484 <_vfiprintf_r+0x22c>)
 8003438:	a904      	add	r1, sp, #16
 800343a:	f3af 8000 	nop.w
 800343e:	4607      	mov	r7, r0
 8003440:	1c78      	adds	r0, r7, #1
 8003442:	d1d6      	bne.n	80033f2 <_vfiprintf_r+0x19a>
 8003444:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003446:	07d9      	lsls	r1, r3, #31
 8003448:	d405      	bmi.n	8003456 <_vfiprintf_r+0x1fe>
 800344a:	89ab      	ldrh	r3, [r5, #12]
 800344c:	059a      	lsls	r2, r3, #22
 800344e:	d402      	bmi.n	8003456 <_vfiprintf_r+0x1fe>
 8003450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003452:	f7ff fd37 	bl	8002ec4 <__retarget_lock_release_recursive>
 8003456:	89ab      	ldrh	r3, [r5, #12]
 8003458:	065b      	lsls	r3, r3, #25
 800345a:	f53f af1f 	bmi.w	800329c <_vfiprintf_r+0x44>
 800345e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003460:	e71e      	b.n	80032a0 <_vfiprintf_r+0x48>
 8003462:	ab03      	add	r3, sp, #12
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	462a      	mov	r2, r5
 8003468:	4630      	mov	r0, r6
 800346a:	4b06      	ldr	r3, [pc, #24]	@ (8003484 <_vfiprintf_r+0x22c>)
 800346c:	a904      	add	r1, sp, #16
 800346e:	f000 f87d 	bl	800356c <_printf_i>
 8003472:	e7e4      	b.n	800343e <_vfiprintf_r+0x1e6>
 8003474:	08003d8f 	.word	0x08003d8f
 8003478:	08003d95 	.word	0x08003d95
 800347c:	08003d99 	.word	0x08003d99
 8003480:	00000000 	.word	0x00000000
 8003484:	08003233 	.word	0x08003233

08003488 <_printf_common>:
 8003488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800348c:	4616      	mov	r6, r2
 800348e:	4698      	mov	r8, r3
 8003490:	688a      	ldr	r2, [r1, #8]
 8003492:	690b      	ldr	r3, [r1, #16]
 8003494:	4607      	mov	r7, r0
 8003496:	4293      	cmp	r3, r2
 8003498:	bfb8      	it	lt
 800349a:	4613      	movlt	r3, r2
 800349c:	6033      	str	r3, [r6, #0]
 800349e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80034a2:	460c      	mov	r4, r1
 80034a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80034a8:	b10a      	cbz	r2, 80034ae <_printf_common+0x26>
 80034aa:	3301      	adds	r3, #1
 80034ac:	6033      	str	r3, [r6, #0]
 80034ae:	6823      	ldr	r3, [r4, #0]
 80034b0:	0699      	lsls	r1, r3, #26
 80034b2:	bf42      	ittt	mi
 80034b4:	6833      	ldrmi	r3, [r6, #0]
 80034b6:	3302      	addmi	r3, #2
 80034b8:	6033      	strmi	r3, [r6, #0]
 80034ba:	6825      	ldr	r5, [r4, #0]
 80034bc:	f015 0506 	ands.w	r5, r5, #6
 80034c0:	d106      	bne.n	80034d0 <_printf_common+0x48>
 80034c2:	f104 0a19 	add.w	sl, r4, #25
 80034c6:	68e3      	ldr	r3, [r4, #12]
 80034c8:	6832      	ldr	r2, [r6, #0]
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	42ab      	cmp	r3, r5
 80034ce:	dc2b      	bgt.n	8003528 <_printf_common+0xa0>
 80034d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80034d4:	6822      	ldr	r2, [r4, #0]
 80034d6:	3b00      	subs	r3, #0
 80034d8:	bf18      	it	ne
 80034da:	2301      	movne	r3, #1
 80034dc:	0692      	lsls	r2, r2, #26
 80034de:	d430      	bmi.n	8003542 <_printf_common+0xba>
 80034e0:	4641      	mov	r1, r8
 80034e2:	4638      	mov	r0, r7
 80034e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80034e8:	47c8      	blx	r9
 80034ea:	3001      	adds	r0, #1
 80034ec:	d023      	beq.n	8003536 <_printf_common+0xae>
 80034ee:	6823      	ldr	r3, [r4, #0]
 80034f0:	6922      	ldr	r2, [r4, #16]
 80034f2:	f003 0306 	and.w	r3, r3, #6
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	bf14      	ite	ne
 80034fa:	2500      	movne	r5, #0
 80034fc:	6833      	ldreq	r3, [r6, #0]
 80034fe:	f04f 0600 	mov.w	r6, #0
 8003502:	bf08      	it	eq
 8003504:	68e5      	ldreq	r5, [r4, #12]
 8003506:	f104 041a 	add.w	r4, r4, #26
 800350a:	bf08      	it	eq
 800350c:	1aed      	subeq	r5, r5, r3
 800350e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003512:	bf08      	it	eq
 8003514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003518:	4293      	cmp	r3, r2
 800351a:	bfc4      	itt	gt
 800351c:	1a9b      	subgt	r3, r3, r2
 800351e:	18ed      	addgt	r5, r5, r3
 8003520:	42b5      	cmp	r5, r6
 8003522:	d11a      	bne.n	800355a <_printf_common+0xd2>
 8003524:	2000      	movs	r0, #0
 8003526:	e008      	b.n	800353a <_printf_common+0xb2>
 8003528:	2301      	movs	r3, #1
 800352a:	4652      	mov	r2, sl
 800352c:	4641      	mov	r1, r8
 800352e:	4638      	mov	r0, r7
 8003530:	47c8      	blx	r9
 8003532:	3001      	adds	r0, #1
 8003534:	d103      	bne.n	800353e <_printf_common+0xb6>
 8003536:	f04f 30ff 	mov.w	r0, #4294967295
 800353a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800353e:	3501      	adds	r5, #1
 8003540:	e7c1      	b.n	80034c6 <_printf_common+0x3e>
 8003542:	2030      	movs	r0, #48	@ 0x30
 8003544:	18e1      	adds	r1, r4, r3
 8003546:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003550:	4422      	add	r2, r4
 8003552:	3302      	adds	r3, #2
 8003554:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003558:	e7c2      	b.n	80034e0 <_printf_common+0x58>
 800355a:	2301      	movs	r3, #1
 800355c:	4622      	mov	r2, r4
 800355e:	4641      	mov	r1, r8
 8003560:	4638      	mov	r0, r7
 8003562:	47c8      	blx	r9
 8003564:	3001      	adds	r0, #1
 8003566:	d0e6      	beq.n	8003536 <_printf_common+0xae>
 8003568:	3601      	adds	r6, #1
 800356a:	e7d9      	b.n	8003520 <_printf_common+0x98>

0800356c <_printf_i>:
 800356c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003570:	7e0f      	ldrb	r7, [r1, #24]
 8003572:	4691      	mov	r9, r2
 8003574:	2f78      	cmp	r7, #120	@ 0x78
 8003576:	4680      	mov	r8, r0
 8003578:	460c      	mov	r4, r1
 800357a:	469a      	mov	sl, r3
 800357c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800357e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003582:	d807      	bhi.n	8003594 <_printf_i+0x28>
 8003584:	2f62      	cmp	r7, #98	@ 0x62
 8003586:	d80a      	bhi.n	800359e <_printf_i+0x32>
 8003588:	2f00      	cmp	r7, #0
 800358a:	f000 80d1 	beq.w	8003730 <_printf_i+0x1c4>
 800358e:	2f58      	cmp	r7, #88	@ 0x58
 8003590:	f000 80b8 	beq.w	8003704 <_printf_i+0x198>
 8003594:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003598:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800359c:	e03a      	b.n	8003614 <_printf_i+0xa8>
 800359e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80035a2:	2b15      	cmp	r3, #21
 80035a4:	d8f6      	bhi.n	8003594 <_printf_i+0x28>
 80035a6:	a101      	add	r1, pc, #4	@ (adr r1, 80035ac <_printf_i+0x40>)
 80035a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035ac:	08003605 	.word	0x08003605
 80035b0:	08003619 	.word	0x08003619
 80035b4:	08003595 	.word	0x08003595
 80035b8:	08003595 	.word	0x08003595
 80035bc:	08003595 	.word	0x08003595
 80035c0:	08003595 	.word	0x08003595
 80035c4:	08003619 	.word	0x08003619
 80035c8:	08003595 	.word	0x08003595
 80035cc:	08003595 	.word	0x08003595
 80035d0:	08003595 	.word	0x08003595
 80035d4:	08003595 	.word	0x08003595
 80035d8:	08003717 	.word	0x08003717
 80035dc:	08003643 	.word	0x08003643
 80035e0:	080036d1 	.word	0x080036d1
 80035e4:	08003595 	.word	0x08003595
 80035e8:	08003595 	.word	0x08003595
 80035ec:	08003739 	.word	0x08003739
 80035f0:	08003595 	.word	0x08003595
 80035f4:	08003643 	.word	0x08003643
 80035f8:	08003595 	.word	0x08003595
 80035fc:	08003595 	.word	0x08003595
 8003600:	080036d9 	.word	0x080036d9
 8003604:	6833      	ldr	r3, [r6, #0]
 8003606:	1d1a      	adds	r2, r3, #4
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6032      	str	r2, [r6, #0]
 800360c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003610:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003614:	2301      	movs	r3, #1
 8003616:	e09c      	b.n	8003752 <_printf_i+0x1e6>
 8003618:	6833      	ldr	r3, [r6, #0]
 800361a:	6820      	ldr	r0, [r4, #0]
 800361c:	1d19      	adds	r1, r3, #4
 800361e:	6031      	str	r1, [r6, #0]
 8003620:	0606      	lsls	r6, r0, #24
 8003622:	d501      	bpl.n	8003628 <_printf_i+0xbc>
 8003624:	681d      	ldr	r5, [r3, #0]
 8003626:	e003      	b.n	8003630 <_printf_i+0xc4>
 8003628:	0645      	lsls	r5, r0, #25
 800362a:	d5fb      	bpl.n	8003624 <_printf_i+0xb8>
 800362c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003630:	2d00      	cmp	r5, #0
 8003632:	da03      	bge.n	800363c <_printf_i+0xd0>
 8003634:	232d      	movs	r3, #45	@ 0x2d
 8003636:	426d      	negs	r5, r5
 8003638:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800363c:	230a      	movs	r3, #10
 800363e:	4858      	ldr	r0, [pc, #352]	@ (80037a0 <_printf_i+0x234>)
 8003640:	e011      	b.n	8003666 <_printf_i+0xfa>
 8003642:	6821      	ldr	r1, [r4, #0]
 8003644:	6833      	ldr	r3, [r6, #0]
 8003646:	0608      	lsls	r0, r1, #24
 8003648:	f853 5b04 	ldr.w	r5, [r3], #4
 800364c:	d402      	bmi.n	8003654 <_printf_i+0xe8>
 800364e:	0649      	lsls	r1, r1, #25
 8003650:	bf48      	it	mi
 8003652:	b2ad      	uxthmi	r5, r5
 8003654:	2f6f      	cmp	r7, #111	@ 0x6f
 8003656:	6033      	str	r3, [r6, #0]
 8003658:	bf14      	ite	ne
 800365a:	230a      	movne	r3, #10
 800365c:	2308      	moveq	r3, #8
 800365e:	4850      	ldr	r0, [pc, #320]	@ (80037a0 <_printf_i+0x234>)
 8003660:	2100      	movs	r1, #0
 8003662:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003666:	6866      	ldr	r6, [r4, #4]
 8003668:	2e00      	cmp	r6, #0
 800366a:	60a6      	str	r6, [r4, #8]
 800366c:	db05      	blt.n	800367a <_printf_i+0x10e>
 800366e:	6821      	ldr	r1, [r4, #0]
 8003670:	432e      	orrs	r6, r5
 8003672:	f021 0104 	bic.w	r1, r1, #4
 8003676:	6021      	str	r1, [r4, #0]
 8003678:	d04b      	beq.n	8003712 <_printf_i+0x1a6>
 800367a:	4616      	mov	r6, r2
 800367c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003680:	fb03 5711 	mls	r7, r3, r1, r5
 8003684:	5dc7      	ldrb	r7, [r0, r7]
 8003686:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800368a:	462f      	mov	r7, r5
 800368c:	42bb      	cmp	r3, r7
 800368e:	460d      	mov	r5, r1
 8003690:	d9f4      	bls.n	800367c <_printf_i+0x110>
 8003692:	2b08      	cmp	r3, #8
 8003694:	d10b      	bne.n	80036ae <_printf_i+0x142>
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	07df      	lsls	r7, r3, #31
 800369a:	d508      	bpl.n	80036ae <_printf_i+0x142>
 800369c:	6923      	ldr	r3, [r4, #16]
 800369e:	6861      	ldr	r1, [r4, #4]
 80036a0:	4299      	cmp	r1, r3
 80036a2:	bfde      	ittt	le
 80036a4:	2330      	movle	r3, #48	@ 0x30
 80036a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80036aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80036ae:	1b92      	subs	r2, r2, r6
 80036b0:	6122      	str	r2, [r4, #16]
 80036b2:	464b      	mov	r3, r9
 80036b4:	4621      	mov	r1, r4
 80036b6:	4640      	mov	r0, r8
 80036b8:	f8cd a000 	str.w	sl, [sp]
 80036bc:	aa03      	add	r2, sp, #12
 80036be:	f7ff fee3 	bl	8003488 <_printf_common>
 80036c2:	3001      	adds	r0, #1
 80036c4:	d14a      	bne.n	800375c <_printf_i+0x1f0>
 80036c6:	f04f 30ff 	mov.w	r0, #4294967295
 80036ca:	b004      	add	sp, #16
 80036cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	f043 0320 	orr.w	r3, r3, #32
 80036d6:	6023      	str	r3, [r4, #0]
 80036d8:	2778      	movs	r7, #120	@ 0x78
 80036da:	4832      	ldr	r0, [pc, #200]	@ (80037a4 <_printf_i+0x238>)
 80036dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	6831      	ldr	r1, [r6, #0]
 80036e4:	061f      	lsls	r7, r3, #24
 80036e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80036ea:	d402      	bmi.n	80036f2 <_printf_i+0x186>
 80036ec:	065f      	lsls	r7, r3, #25
 80036ee:	bf48      	it	mi
 80036f0:	b2ad      	uxthmi	r5, r5
 80036f2:	6031      	str	r1, [r6, #0]
 80036f4:	07d9      	lsls	r1, r3, #31
 80036f6:	bf44      	itt	mi
 80036f8:	f043 0320 	orrmi.w	r3, r3, #32
 80036fc:	6023      	strmi	r3, [r4, #0]
 80036fe:	b11d      	cbz	r5, 8003708 <_printf_i+0x19c>
 8003700:	2310      	movs	r3, #16
 8003702:	e7ad      	b.n	8003660 <_printf_i+0xf4>
 8003704:	4826      	ldr	r0, [pc, #152]	@ (80037a0 <_printf_i+0x234>)
 8003706:	e7e9      	b.n	80036dc <_printf_i+0x170>
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	f023 0320 	bic.w	r3, r3, #32
 800370e:	6023      	str	r3, [r4, #0]
 8003710:	e7f6      	b.n	8003700 <_printf_i+0x194>
 8003712:	4616      	mov	r6, r2
 8003714:	e7bd      	b.n	8003692 <_printf_i+0x126>
 8003716:	6833      	ldr	r3, [r6, #0]
 8003718:	6825      	ldr	r5, [r4, #0]
 800371a:	1d18      	adds	r0, r3, #4
 800371c:	6961      	ldr	r1, [r4, #20]
 800371e:	6030      	str	r0, [r6, #0]
 8003720:	062e      	lsls	r6, r5, #24
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	d501      	bpl.n	800372a <_printf_i+0x1be>
 8003726:	6019      	str	r1, [r3, #0]
 8003728:	e002      	b.n	8003730 <_printf_i+0x1c4>
 800372a:	0668      	lsls	r0, r5, #25
 800372c:	d5fb      	bpl.n	8003726 <_printf_i+0x1ba>
 800372e:	8019      	strh	r1, [r3, #0]
 8003730:	2300      	movs	r3, #0
 8003732:	4616      	mov	r6, r2
 8003734:	6123      	str	r3, [r4, #16]
 8003736:	e7bc      	b.n	80036b2 <_printf_i+0x146>
 8003738:	6833      	ldr	r3, [r6, #0]
 800373a:	2100      	movs	r1, #0
 800373c:	1d1a      	adds	r2, r3, #4
 800373e:	6032      	str	r2, [r6, #0]
 8003740:	681e      	ldr	r6, [r3, #0]
 8003742:	6862      	ldr	r2, [r4, #4]
 8003744:	4630      	mov	r0, r6
 8003746:	f000 f975 	bl	8003a34 <memchr>
 800374a:	b108      	cbz	r0, 8003750 <_printf_i+0x1e4>
 800374c:	1b80      	subs	r0, r0, r6
 800374e:	6060      	str	r0, [r4, #4]
 8003750:	6863      	ldr	r3, [r4, #4]
 8003752:	6123      	str	r3, [r4, #16]
 8003754:	2300      	movs	r3, #0
 8003756:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800375a:	e7aa      	b.n	80036b2 <_printf_i+0x146>
 800375c:	4632      	mov	r2, r6
 800375e:	4649      	mov	r1, r9
 8003760:	4640      	mov	r0, r8
 8003762:	6923      	ldr	r3, [r4, #16]
 8003764:	47d0      	blx	sl
 8003766:	3001      	adds	r0, #1
 8003768:	d0ad      	beq.n	80036c6 <_printf_i+0x15a>
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	079b      	lsls	r3, r3, #30
 800376e:	d413      	bmi.n	8003798 <_printf_i+0x22c>
 8003770:	68e0      	ldr	r0, [r4, #12]
 8003772:	9b03      	ldr	r3, [sp, #12]
 8003774:	4298      	cmp	r0, r3
 8003776:	bfb8      	it	lt
 8003778:	4618      	movlt	r0, r3
 800377a:	e7a6      	b.n	80036ca <_printf_i+0x15e>
 800377c:	2301      	movs	r3, #1
 800377e:	4632      	mov	r2, r6
 8003780:	4649      	mov	r1, r9
 8003782:	4640      	mov	r0, r8
 8003784:	47d0      	blx	sl
 8003786:	3001      	adds	r0, #1
 8003788:	d09d      	beq.n	80036c6 <_printf_i+0x15a>
 800378a:	3501      	adds	r5, #1
 800378c:	68e3      	ldr	r3, [r4, #12]
 800378e:	9903      	ldr	r1, [sp, #12]
 8003790:	1a5b      	subs	r3, r3, r1
 8003792:	42ab      	cmp	r3, r5
 8003794:	dcf2      	bgt.n	800377c <_printf_i+0x210>
 8003796:	e7eb      	b.n	8003770 <_printf_i+0x204>
 8003798:	2500      	movs	r5, #0
 800379a:	f104 0619 	add.w	r6, r4, #25
 800379e:	e7f5      	b.n	800378c <_printf_i+0x220>
 80037a0:	08003da0 	.word	0x08003da0
 80037a4:	08003db1 	.word	0x08003db1

080037a8 <__sflush_r>:
 80037a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	0716      	lsls	r6, r2, #28
 80037b0:	4605      	mov	r5, r0
 80037b2:	460c      	mov	r4, r1
 80037b4:	d454      	bmi.n	8003860 <__sflush_r+0xb8>
 80037b6:	684b      	ldr	r3, [r1, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	dc02      	bgt.n	80037c2 <__sflush_r+0x1a>
 80037bc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80037be:	2b00      	cmp	r3, #0
 80037c0:	dd48      	ble.n	8003854 <__sflush_r+0xac>
 80037c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80037c4:	2e00      	cmp	r6, #0
 80037c6:	d045      	beq.n	8003854 <__sflush_r+0xac>
 80037c8:	2300      	movs	r3, #0
 80037ca:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80037ce:	682f      	ldr	r7, [r5, #0]
 80037d0:	6a21      	ldr	r1, [r4, #32]
 80037d2:	602b      	str	r3, [r5, #0]
 80037d4:	d030      	beq.n	8003838 <__sflush_r+0x90>
 80037d6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80037d8:	89a3      	ldrh	r3, [r4, #12]
 80037da:	0759      	lsls	r1, r3, #29
 80037dc:	d505      	bpl.n	80037ea <__sflush_r+0x42>
 80037de:	6863      	ldr	r3, [r4, #4]
 80037e0:	1ad2      	subs	r2, r2, r3
 80037e2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80037e4:	b10b      	cbz	r3, 80037ea <__sflush_r+0x42>
 80037e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80037e8:	1ad2      	subs	r2, r2, r3
 80037ea:	2300      	movs	r3, #0
 80037ec:	4628      	mov	r0, r5
 80037ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80037f0:	6a21      	ldr	r1, [r4, #32]
 80037f2:	47b0      	blx	r6
 80037f4:	1c43      	adds	r3, r0, #1
 80037f6:	89a3      	ldrh	r3, [r4, #12]
 80037f8:	d106      	bne.n	8003808 <__sflush_r+0x60>
 80037fa:	6829      	ldr	r1, [r5, #0]
 80037fc:	291d      	cmp	r1, #29
 80037fe:	d82b      	bhi.n	8003858 <__sflush_r+0xb0>
 8003800:	4a28      	ldr	r2, [pc, #160]	@ (80038a4 <__sflush_r+0xfc>)
 8003802:	40ca      	lsrs	r2, r1
 8003804:	07d6      	lsls	r6, r2, #31
 8003806:	d527      	bpl.n	8003858 <__sflush_r+0xb0>
 8003808:	2200      	movs	r2, #0
 800380a:	6062      	str	r2, [r4, #4]
 800380c:	6922      	ldr	r2, [r4, #16]
 800380e:	04d9      	lsls	r1, r3, #19
 8003810:	6022      	str	r2, [r4, #0]
 8003812:	d504      	bpl.n	800381e <__sflush_r+0x76>
 8003814:	1c42      	adds	r2, r0, #1
 8003816:	d101      	bne.n	800381c <__sflush_r+0x74>
 8003818:	682b      	ldr	r3, [r5, #0]
 800381a:	b903      	cbnz	r3, 800381e <__sflush_r+0x76>
 800381c:	6560      	str	r0, [r4, #84]	@ 0x54
 800381e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003820:	602f      	str	r7, [r5, #0]
 8003822:	b1b9      	cbz	r1, 8003854 <__sflush_r+0xac>
 8003824:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003828:	4299      	cmp	r1, r3
 800382a:	d002      	beq.n	8003832 <__sflush_r+0x8a>
 800382c:	4628      	mov	r0, r5
 800382e:	f7ff fb4b 	bl	8002ec8 <_free_r>
 8003832:	2300      	movs	r3, #0
 8003834:	6363      	str	r3, [r4, #52]	@ 0x34
 8003836:	e00d      	b.n	8003854 <__sflush_r+0xac>
 8003838:	2301      	movs	r3, #1
 800383a:	4628      	mov	r0, r5
 800383c:	47b0      	blx	r6
 800383e:	4602      	mov	r2, r0
 8003840:	1c50      	adds	r0, r2, #1
 8003842:	d1c9      	bne.n	80037d8 <__sflush_r+0x30>
 8003844:	682b      	ldr	r3, [r5, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0c6      	beq.n	80037d8 <__sflush_r+0x30>
 800384a:	2b1d      	cmp	r3, #29
 800384c:	d001      	beq.n	8003852 <__sflush_r+0xaa>
 800384e:	2b16      	cmp	r3, #22
 8003850:	d11d      	bne.n	800388e <__sflush_r+0xe6>
 8003852:	602f      	str	r7, [r5, #0]
 8003854:	2000      	movs	r0, #0
 8003856:	e021      	b.n	800389c <__sflush_r+0xf4>
 8003858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800385c:	b21b      	sxth	r3, r3
 800385e:	e01a      	b.n	8003896 <__sflush_r+0xee>
 8003860:	690f      	ldr	r7, [r1, #16]
 8003862:	2f00      	cmp	r7, #0
 8003864:	d0f6      	beq.n	8003854 <__sflush_r+0xac>
 8003866:	0793      	lsls	r3, r2, #30
 8003868:	bf18      	it	ne
 800386a:	2300      	movne	r3, #0
 800386c:	680e      	ldr	r6, [r1, #0]
 800386e:	bf08      	it	eq
 8003870:	694b      	ldreq	r3, [r1, #20]
 8003872:	1bf6      	subs	r6, r6, r7
 8003874:	600f      	str	r7, [r1, #0]
 8003876:	608b      	str	r3, [r1, #8]
 8003878:	2e00      	cmp	r6, #0
 800387a:	ddeb      	ble.n	8003854 <__sflush_r+0xac>
 800387c:	4633      	mov	r3, r6
 800387e:	463a      	mov	r2, r7
 8003880:	4628      	mov	r0, r5
 8003882:	6a21      	ldr	r1, [r4, #32]
 8003884:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003888:	47e0      	blx	ip
 800388a:	2800      	cmp	r0, #0
 800388c:	dc07      	bgt.n	800389e <__sflush_r+0xf6>
 800388e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003896:	f04f 30ff 	mov.w	r0, #4294967295
 800389a:	81a3      	strh	r3, [r4, #12]
 800389c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800389e:	4407      	add	r7, r0
 80038a0:	1a36      	subs	r6, r6, r0
 80038a2:	e7e9      	b.n	8003878 <__sflush_r+0xd0>
 80038a4:	20400001 	.word	0x20400001

080038a8 <_fflush_r>:
 80038a8:	b538      	push	{r3, r4, r5, lr}
 80038aa:	690b      	ldr	r3, [r1, #16]
 80038ac:	4605      	mov	r5, r0
 80038ae:	460c      	mov	r4, r1
 80038b0:	b913      	cbnz	r3, 80038b8 <_fflush_r+0x10>
 80038b2:	2500      	movs	r5, #0
 80038b4:	4628      	mov	r0, r5
 80038b6:	bd38      	pop	{r3, r4, r5, pc}
 80038b8:	b118      	cbz	r0, 80038c2 <_fflush_r+0x1a>
 80038ba:	6a03      	ldr	r3, [r0, #32]
 80038bc:	b90b      	cbnz	r3, 80038c2 <_fflush_r+0x1a>
 80038be:	f7ff f8c3 	bl	8002a48 <__sinit>
 80038c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f3      	beq.n	80038b2 <_fflush_r+0xa>
 80038ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80038cc:	07d0      	lsls	r0, r2, #31
 80038ce:	d404      	bmi.n	80038da <_fflush_r+0x32>
 80038d0:	0599      	lsls	r1, r3, #22
 80038d2:	d402      	bmi.n	80038da <_fflush_r+0x32>
 80038d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038d6:	f7ff faf4 	bl	8002ec2 <__retarget_lock_acquire_recursive>
 80038da:	4628      	mov	r0, r5
 80038dc:	4621      	mov	r1, r4
 80038de:	f7ff ff63 	bl	80037a8 <__sflush_r>
 80038e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80038e4:	4605      	mov	r5, r0
 80038e6:	07da      	lsls	r2, r3, #31
 80038e8:	d4e4      	bmi.n	80038b4 <_fflush_r+0xc>
 80038ea:	89a3      	ldrh	r3, [r4, #12]
 80038ec:	059b      	lsls	r3, r3, #22
 80038ee:	d4e1      	bmi.n	80038b4 <_fflush_r+0xc>
 80038f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038f2:	f7ff fae7 	bl	8002ec4 <__retarget_lock_release_recursive>
 80038f6:	e7dd      	b.n	80038b4 <_fflush_r+0xc>

080038f8 <__swhatbuf_r>:
 80038f8:	b570      	push	{r4, r5, r6, lr}
 80038fa:	460c      	mov	r4, r1
 80038fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003900:	4615      	mov	r5, r2
 8003902:	2900      	cmp	r1, #0
 8003904:	461e      	mov	r6, r3
 8003906:	b096      	sub	sp, #88	@ 0x58
 8003908:	da0c      	bge.n	8003924 <__swhatbuf_r+0x2c>
 800390a:	89a3      	ldrh	r3, [r4, #12]
 800390c:	2100      	movs	r1, #0
 800390e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003912:	bf14      	ite	ne
 8003914:	2340      	movne	r3, #64	@ 0x40
 8003916:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800391a:	2000      	movs	r0, #0
 800391c:	6031      	str	r1, [r6, #0]
 800391e:	602b      	str	r3, [r5, #0]
 8003920:	b016      	add	sp, #88	@ 0x58
 8003922:	bd70      	pop	{r4, r5, r6, pc}
 8003924:	466a      	mov	r2, sp
 8003926:	f000 f863 	bl	80039f0 <_fstat_r>
 800392a:	2800      	cmp	r0, #0
 800392c:	dbed      	blt.n	800390a <__swhatbuf_r+0x12>
 800392e:	9901      	ldr	r1, [sp, #4]
 8003930:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003934:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003938:	4259      	negs	r1, r3
 800393a:	4159      	adcs	r1, r3
 800393c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003940:	e7eb      	b.n	800391a <__swhatbuf_r+0x22>

08003942 <__smakebuf_r>:
 8003942:	898b      	ldrh	r3, [r1, #12]
 8003944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003946:	079d      	lsls	r5, r3, #30
 8003948:	4606      	mov	r6, r0
 800394a:	460c      	mov	r4, r1
 800394c:	d507      	bpl.n	800395e <__smakebuf_r+0x1c>
 800394e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003952:	6023      	str	r3, [r4, #0]
 8003954:	6123      	str	r3, [r4, #16]
 8003956:	2301      	movs	r3, #1
 8003958:	6163      	str	r3, [r4, #20]
 800395a:	b003      	add	sp, #12
 800395c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800395e:	466a      	mov	r2, sp
 8003960:	ab01      	add	r3, sp, #4
 8003962:	f7ff ffc9 	bl	80038f8 <__swhatbuf_r>
 8003966:	9f00      	ldr	r7, [sp, #0]
 8003968:	4605      	mov	r5, r0
 800396a:	4639      	mov	r1, r7
 800396c:	4630      	mov	r0, r6
 800396e:	f7fe fecf 	bl	8002710 <_malloc_r>
 8003972:	b948      	cbnz	r0, 8003988 <__smakebuf_r+0x46>
 8003974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003978:	059a      	lsls	r2, r3, #22
 800397a:	d4ee      	bmi.n	800395a <__smakebuf_r+0x18>
 800397c:	f023 0303 	bic.w	r3, r3, #3
 8003980:	f043 0302 	orr.w	r3, r3, #2
 8003984:	81a3      	strh	r3, [r4, #12]
 8003986:	e7e2      	b.n	800394e <__smakebuf_r+0xc>
 8003988:	89a3      	ldrh	r3, [r4, #12]
 800398a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800398e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003992:	81a3      	strh	r3, [r4, #12]
 8003994:	9b01      	ldr	r3, [sp, #4]
 8003996:	6020      	str	r0, [r4, #0]
 8003998:	b15b      	cbz	r3, 80039b2 <__smakebuf_r+0x70>
 800399a:	4630      	mov	r0, r6
 800399c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039a0:	f000 f838 	bl	8003a14 <_isatty_r>
 80039a4:	b128      	cbz	r0, 80039b2 <__smakebuf_r+0x70>
 80039a6:	89a3      	ldrh	r3, [r4, #12]
 80039a8:	f023 0303 	bic.w	r3, r3, #3
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	81a3      	strh	r3, [r4, #12]
 80039b2:	89a3      	ldrh	r3, [r4, #12]
 80039b4:	431d      	orrs	r5, r3
 80039b6:	81a5      	strh	r5, [r4, #12]
 80039b8:	e7cf      	b.n	800395a <__smakebuf_r+0x18>

080039ba <memmove>:
 80039ba:	4288      	cmp	r0, r1
 80039bc:	b510      	push	{r4, lr}
 80039be:	eb01 0402 	add.w	r4, r1, r2
 80039c2:	d902      	bls.n	80039ca <memmove+0x10>
 80039c4:	4284      	cmp	r4, r0
 80039c6:	4623      	mov	r3, r4
 80039c8:	d807      	bhi.n	80039da <memmove+0x20>
 80039ca:	1e43      	subs	r3, r0, #1
 80039cc:	42a1      	cmp	r1, r4
 80039ce:	d008      	beq.n	80039e2 <memmove+0x28>
 80039d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039d8:	e7f8      	b.n	80039cc <memmove+0x12>
 80039da:	4601      	mov	r1, r0
 80039dc:	4402      	add	r2, r0
 80039de:	428a      	cmp	r2, r1
 80039e0:	d100      	bne.n	80039e4 <memmove+0x2a>
 80039e2:	bd10      	pop	{r4, pc}
 80039e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039ec:	e7f7      	b.n	80039de <memmove+0x24>
	...

080039f0 <_fstat_r>:
 80039f0:	b538      	push	{r3, r4, r5, lr}
 80039f2:	2300      	movs	r3, #0
 80039f4:	4d06      	ldr	r5, [pc, #24]	@ (8003a10 <_fstat_r+0x20>)
 80039f6:	4604      	mov	r4, r0
 80039f8:	4608      	mov	r0, r1
 80039fa:	4611      	mov	r1, r2
 80039fc:	602b      	str	r3, [r5, #0]
 80039fe:	f7fd f8f5 	bl	8000bec <_fstat>
 8003a02:	1c43      	adds	r3, r0, #1
 8003a04:	d102      	bne.n	8003a0c <_fstat_r+0x1c>
 8003a06:	682b      	ldr	r3, [r5, #0]
 8003a08:	b103      	cbz	r3, 8003a0c <_fstat_r+0x1c>
 8003a0a:	6023      	str	r3, [r4, #0]
 8003a0c:	bd38      	pop	{r3, r4, r5, pc}
 8003a0e:	bf00      	nop
 8003a10:	2000026c 	.word	0x2000026c

08003a14 <_isatty_r>:
 8003a14:	b538      	push	{r3, r4, r5, lr}
 8003a16:	2300      	movs	r3, #0
 8003a18:	4d05      	ldr	r5, [pc, #20]	@ (8003a30 <_isatty_r+0x1c>)
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	4608      	mov	r0, r1
 8003a1e:	602b      	str	r3, [r5, #0]
 8003a20:	f7fd f8f3 	bl	8000c0a <_isatty>
 8003a24:	1c43      	adds	r3, r0, #1
 8003a26:	d102      	bne.n	8003a2e <_isatty_r+0x1a>
 8003a28:	682b      	ldr	r3, [r5, #0]
 8003a2a:	b103      	cbz	r3, 8003a2e <_isatty_r+0x1a>
 8003a2c:	6023      	str	r3, [r4, #0]
 8003a2e:	bd38      	pop	{r3, r4, r5, pc}
 8003a30:	2000026c 	.word	0x2000026c

08003a34 <memchr>:
 8003a34:	4603      	mov	r3, r0
 8003a36:	b510      	push	{r4, lr}
 8003a38:	b2c9      	uxtb	r1, r1
 8003a3a:	4402      	add	r2, r0
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	d101      	bne.n	8003a46 <memchr+0x12>
 8003a42:	2000      	movs	r0, #0
 8003a44:	e003      	b.n	8003a4e <memchr+0x1a>
 8003a46:	7804      	ldrb	r4, [r0, #0]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	428c      	cmp	r4, r1
 8003a4c:	d1f6      	bne.n	8003a3c <memchr+0x8>
 8003a4e:	bd10      	pop	{r4, pc}

08003a50 <memcpy>:
 8003a50:	440a      	add	r2, r1
 8003a52:	4291      	cmp	r1, r2
 8003a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a58:	d100      	bne.n	8003a5c <memcpy+0xc>
 8003a5a:	4770      	bx	lr
 8003a5c:	b510      	push	{r4, lr}
 8003a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a62:	4291      	cmp	r1, r2
 8003a64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a68:	d1f9      	bne.n	8003a5e <memcpy+0xe>
 8003a6a:	bd10      	pop	{r4, pc}

08003a6c <_realloc_r>:
 8003a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a70:	4607      	mov	r7, r0
 8003a72:	4614      	mov	r4, r2
 8003a74:	460d      	mov	r5, r1
 8003a76:	b921      	cbnz	r1, 8003a82 <_realloc_r+0x16>
 8003a78:	4611      	mov	r1, r2
 8003a7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a7e:	f7fe be47 	b.w	8002710 <_malloc_r>
 8003a82:	b92a      	cbnz	r2, 8003a90 <_realloc_r+0x24>
 8003a84:	f7ff fa20 	bl	8002ec8 <_free_r>
 8003a88:	4625      	mov	r5, r4
 8003a8a:	4628      	mov	r0, r5
 8003a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a90:	f000 f81a 	bl	8003ac8 <_malloc_usable_size_r>
 8003a94:	4284      	cmp	r4, r0
 8003a96:	4606      	mov	r6, r0
 8003a98:	d802      	bhi.n	8003aa0 <_realloc_r+0x34>
 8003a9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003a9e:	d8f4      	bhi.n	8003a8a <_realloc_r+0x1e>
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	4638      	mov	r0, r7
 8003aa4:	f7fe fe34 	bl	8002710 <_malloc_r>
 8003aa8:	4680      	mov	r8, r0
 8003aaa:	b908      	cbnz	r0, 8003ab0 <_realloc_r+0x44>
 8003aac:	4645      	mov	r5, r8
 8003aae:	e7ec      	b.n	8003a8a <_realloc_r+0x1e>
 8003ab0:	42b4      	cmp	r4, r6
 8003ab2:	4622      	mov	r2, r4
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	bf28      	it	cs
 8003ab8:	4632      	movcs	r2, r6
 8003aba:	f7ff ffc9 	bl	8003a50 <memcpy>
 8003abe:	4629      	mov	r1, r5
 8003ac0:	4638      	mov	r0, r7
 8003ac2:	f7ff fa01 	bl	8002ec8 <_free_r>
 8003ac6:	e7f1      	b.n	8003aac <_realloc_r+0x40>

08003ac8 <_malloc_usable_size_r>:
 8003ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003acc:	1f18      	subs	r0, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bfbc      	itt	lt
 8003ad2:	580b      	ldrlt	r3, [r1, r0]
 8003ad4:	18c0      	addlt	r0, r0, r3
 8003ad6:	4770      	bx	lr

08003ad8 <_init>:
 8003ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ada:	bf00      	nop
 8003adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ade:	bc08      	pop	{r3}
 8003ae0:	469e      	mov	lr, r3
 8003ae2:	4770      	bx	lr

08003ae4 <_fini>:
 8003ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae6:	bf00      	nop
 8003ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aea:	bc08      	pop	{r3}
 8003aec:	469e      	mov	lr, r3
 8003aee:	4770      	bx	lr
